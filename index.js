(()=>{var t={377:(t,e,i)=>{var s=i(832),n=i(652),r=i(801),o=i(30),a=i(618),h=i(49),c=i(971);c.alea=s,c.xor128=n,c.xorwow=r,c.xorshift7=o,c.xor4096=a,c.tychei=h,t.exports=c},832:function(t,e,i){var s;!function(t,n,r){function o(t){var e=this,i=function(){var t=4022871197,e=function(e){e=String(e);for(var i=0;i<e.length;i++){var s=.02519603282416938*(t+=e.charCodeAt(i));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)};return e}();e.next=function(){var t=2091639*e.s0+2.3283064365386963e-10*e.c;return e.s0=e.s1,e.s1=e.s2,e.s2=t-(e.c=0|t)},e.c=1,e.s0=i(" "),e.s1=i(" "),e.s2=i(" "),e.s0-=i(t),e.s0<0&&(e.s0+=1),e.s1-=i(t),e.s1<0&&(e.s1+=1),e.s2-=i(t),e.s2<0&&(e.s2+=1),i=null}function a(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function h(t,e){var i=new o(t),s=e&&e.state,n=i.next;return n.int32=function(){return 4294967296*i.next()|0},n.double=function(){return n()+11102230246251565e-32*(2097152*n()|0)},n.quick=n,s&&("object"==typeof s&&a(s,i),n.state=function(){return a(i,{})}),n}n&&n.exports?n.exports=h:i.amdD&&i.amdO?void 0===(s=function(){return h}.call(e,i,e,n))||(n.exports=s):this.alea=h}(0,t=i.nmd(t),i.amdD)},49:function(t,e,i){var s;!function(t,n,r){function o(t){var e=this,i="";e.next=function(){var t=e.b,i=e.c,s=e.d,n=e.a;return t=t<<25^t>>>7^i,i=i-s|0,s=s<<24^s>>>8^n,n=n-t|0,e.b=t=t<<20^t>>>12^i,e.c=i=i-s|0,e.d=s<<16^i>>>16^n,e.a=n-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):i+=t;for(var s=0;s<i.length+20;s++)e.b^=0|i.charCodeAt(s),e.next()}function a(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function h(t,e){var i=new o(t),s=e&&e.state,n=function(){return(i.next()>>>0)/4294967296};return n.double=function(){do{var t=((i.next()>>>11)+(i.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},n.int32=i.next,n.quick=n,s&&("object"==typeof s&&a(s,i),n.state=function(){return a(i,{})}),n}n&&n.exports?n.exports=h:i.amdD&&i.amdO?void 0===(s=function(){return h}.call(e,i,e,n))||(n.exports=s):this.tychei=h}(0,t=i.nmd(t),i.amdD)},652:function(t,e,i){var s;!function(t,n,r){function o(t){var e=this,i="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:i+=t;for(var s=0;s<i.length+64;s++)e.x^=0|i.charCodeAt(s),e.next()}function a(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function h(t,e){var i=new o(t),s=e&&e.state,n=function(){return(i.next()>>>0)/4294967296};return n.double=function(){do{var t=((i.next()>>>11)+(i.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},n.int32=i.next,n.quick=n,s&&("object"==typeof s&&a(s,i),n.state=function(){return a(i,{})}),n}n&&n.exports?n.exports=h:i.amdD&&i.amdO?void 0===(s=function(){return h}.call(e,i,e,n))||(n.exports=s):this.xor128=h}(0,t=i.nmd(t),i.amdD)},618:function(t,e,i){var s;!function(t,n,r){function o(t){var e=this;e.next=function(){var t,i,s=e.w,n=e.X,r=e.i;return e.w=s=s+1640531527|0,i=n[r+34&127],t=n[r=r+1&127],i^=i<<13,t^=t<<17,i^=i>>>15,t^=t>>>12,i=n[r]=i^t,e.i=r,i+(s^s>>>16)|0},function(t,e){var i,s,n,r,o,a=[],h=128;for(e===(0|e)?(s=e,e=null):(e+="\0",s=0,h=Math.max(h,e.length)),n=0,r=-32;r<h;++r)e&&(s^=e.charCodeAt((r+32)%e.length)),0===r&&(o=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,r>=0&&(o=o+1640531527|0,n=0==(i=a[127&r]^=s+o)?n+1:0);for(n>=128&&(a[127&(e&&e.length||0)]=-1),n=127,r=512;r>0;--r)s=a[n+34&127],i=a[n=n+1&127],s^=s<<13,i^=i<<17,s^=s>>>15,i^=i>>>12,a[n]=s^i;t.w=o,t.X=a,t.i=n}(e,t)}function a(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function h(t,e){null==t&&(t=+new Date);var i=new o(t),s=e&&e.state,n=function(){return(i.next()>>>0)/4294967296};return n.double=function(){do{var t=((i.next()>>>11)+(i.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},n.int32=i.next,n.quick=n,s&&(s.X&&a(s,i),n.state=function(){return a(i,{})}),n}n&&n.exports?n.exports=h:i.amdD&&i.amdO?void 0===(s=function(){return h}.call(e,i,e,n))||(n.exports=s):this.xor4096=h}(0,t=i.nmd(t),i.amdD)},30:function(t,e,i){var s;!function(t,n,r){function o(t){var e=this;e.next=function(){var t,i,s=e.x,n=e.i;return t=s[n],i=(t^=t>>>7)^t<<24,i^=(t=s[n+1&7])^t>>>10,i^=(t=s[n+3&7])^t>>>3,i^=(t=s[n+4&7])^t<<7,t=s[n+7&7],i^=(t^=t<<13)^t<<9,s[n]=i,e.i=n+1&7,i},function(t,e){var i,s=[];if(e===(0|e))s[0]=e;else for(e=""+e,i=0;i<e.length;++i)s[7&i]=s[7&i]<<15^e.charCodeAt(i)+s[i+1&7]<<13;for(;s.length<8;)s.push(0);for(i=0;i<8&&0===s[i];++i);for(8==i?s[7]=-1:s[i],t.x=s,t.i=0,i=256;i>0;--i)t.next()}(e,t)}function a(t,e){return e.x=t.x.slice(),e.i=t.i,e}function h(t,e){null==t&&(t=+new Date);var i=new o(t),s=e&&e.state,n=function(){return(i.next()>>>0)/4294967296};return n.double=function(){do{var t=((i.next()>>>11)+(i.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},n.int32=i.next,n.quick=n,s&&(s.x&&a(s,i),n.state=function(){return a(i,{})}),n}n&&n.exports?n.exports=h:i.amdD&&i.amdO?void 0===(s=function(){return h}.call(e,i,e,n))||(n.exports=s):this.xorshift7=h}(0,t=i.nmd(t),i.amdD)},801:function(t,e,i){var s;!function(t,n,r){function o(t){var e=this,i="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:i+=t;for(var s=0;s<i.length+64;s++)e.x^=0|i.charCodeAt(s),s==i.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function a(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function h(t,e){var i=new o(t),s=e&&e.state,n=function(){return(i.next()>>>0)/4294967296};return n.double=function(){do{var t=((i.next()>>>11)+(i.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},n.int32=i.next,n.quick=n,s&&("object"==typeof s&&a(s,i),n.state=function(){return a(i,{})}),n}n&&n.exports?n.exports=h:i.amdD&&i.amdO?void 0===(s=function(){return h}.call(e,i,e,n))||(n.exports=s):this.xorwow=h}(0,t=i.nmd(t),i.amdD)},971:function(t,e,i){var s;!function(n,r,o){var a,h=256,c=6,l="random",d=o.pow(h,c),u=o.pow(2,52),p=2*u,y=h-1;function x(t,e,i){var s=[],y=g(m((e=1==e?{entropy:!0}:e||{}).entropy?[t,w(r)]:null==t?function(){try{var t;return a&&(t=a.randomBytes)?t=t(h):(t=new Uint8Array(h),(n.crypto||n.msCrypto).getRandomValues(t)),w(t)}catch(t){var e=n.navigator,i=e&&e.plugins;return[+new Date,n,i,n.screen,w(r)]}}():t,3),s),x=new f(s),M=function(){for(var t=x.g(c),e=d,i=0;t<u;)t=(t+i)*h,e*=h,i=x.g(1);for(;t>=p;)t/=2,e/=2,i>>>=1;return(t+i)/e};return M.int32=function(){return 0|x.g(4)},M.quick=function(){return x.g(4)/4294967296},M.double=M,g(w(x.S),r),(e.pass||i||function(t,e,i,s){return s&&(s.S&&v(s,x),t.state=function(){return v(x,{})}),i?(o[l]=t,e):t})(M,y,"global"in e?e.global:this==o,e.state)}function f(t){var e,i=t.length,s=this,n=0,r=s.i=s.j=0,o=s.S=[];for(i||(t=[i++]);n<h;)o[n]=n++;for(n=0;n<h;n++)o[n]=o[r=y&r+t[n%i]+(e=o[n])],o[r]=e;(s.g=function(t){for(var e,i=0,n=s.i,r=s.j,o=s.S;t--;)e=o[n=y&n+1],i=i*h+o[y&(o[n]=o[r=y&r+e])+(o[r]=e)];return s.i=n,s.j=r,i})(h)}function v(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function m(t,e){var i,s=[],n=typeof t;if(e&&"object"==n)for(i in t)try{s.push(m(t[i],e-1))}catch(t){}return s.length?s:"string"==n?t:t+"\0"}function g(t,e){for(var i,s=t+"",n=0;n<s.length;)e[y&n]=y&(i^=19*e[y&n])+s.charCodeAt(n++);return w(e)}function w(t){return String.fromCharCode.apply(0,t)}if(g(o.random(),r),t.exports){t.exports=x;try{a=i(42)}catch(t){}}else void 0===(s=function(){return x}.call(e,i,e,t))||(t.exports=s)}("undefined"!=typeof self?self:this,[],Math)},42:()=>{}},e={};function i(s){var n=e[s];if(void 0!==n)return n.exports;var r=e[s]={id:s,loaded:!1,exports:{}};return t[s].call(r.exports,r,r.exports,i),r.loaded=!0,r.exports}i.amdD=function(){throw new Error("define cannot be used indirect")},i.amdO={},i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var s in e)i.o(e,s)&&!i.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{"use strict";var t=i(377),e=i.n(t);const s=function(t,i,s){const n=e()(s||window.crypto.getRandomValues(new Uint32Array(1))[0].toString()),r=[],o=[],a=t=>{if(t.width<20||t.height<20)r.push(t);else{const{leftRoom:e,rightRoom:i,line:s}=function(t,e){const i=e()<.5,s={x:Math.floor(t.x+t.width*e()),y:Math.floor(t.y+t.height*e())},n={x:t.x,y:t.y,width:i?s.x-t.x:t.width,height:i?t.height:s.y-t.y},r={x:i?s.x:t.x,y:i?t.y:s.y,width:i?t.x+t.width-s.x:t.width,height:i?t.height:t.y+t.height-s.y},o={start:{x:s.x,y:s.y},end:{x:i?s.x:s.x+1,y:i?s.y+1:s.y}};return{leftRoom:n,rightRoom:r,line:o}}(t,n);a(e),a(i),r.push(e,i),o.push(s)}};a({x:0,y:0,width:t,height:i});const h=Array(i).fill().map((()=>Array(t).fill(1)));return r.forEach((t=>{for(let e=t.y+1;e<t.y+t.height-1;e++)for(let i=t.x+1;i<t.x+t.width-1;i++)h[e][i]=0;const e=Math.floor(t.x+t.width/2),i=Math.floor(t.y+t.height/2);h[i][e]=2})),o.forEach((t=>{const{start:e,end:i}=t;if(e.x===i.x)for(let t=e.y;t<i.y;t++)h[t][e.x]=1;else for(let t=e.x;t<i.x;t++)h[e.y][t]=1})),h}(50,50,"seed");console.log(s);const n=[{id:0,name:"First level",map:s}];class r{constructor(t){this.id=t,this.pos={x:0,y:0},this.speed=0,this.moveSpeed=0,this.rotation=0,this.direction={x:0,y:0},this.rotationSpeed=0}}class o extends r{constructor(t){super(t),this.isStrafing=!1,this.id=t,this.pos={x:16,y:10},this.speed=0,this.moveSpeed=.005,this.rotation=0,this.direction={x:0,y:0},this.rotationSpeed=1*Math.PI/360}}class a{constructor(t,e){this._canvas=document.createElement("canvas"),this._canvas.width=t,this._canvas.height=e,this._canvas.style.position="absolute",this._canvas.style.top="0",this._canvas.style.left="0",this._canvas.id="hud",this._ctx=this._canvas.getContext("2d"),this.renderCrosshair()}get canvas(){return this._canvas}get ctx(){return this._ctx}renderCrosshair(){this._ctx.beginPath(),this._ctx.moveTo(this.canvas.width/2,this._canvas.height/2),this._ctx.lineTo(this._canvas.width/2+10,this._canvas.height/2),this._ctx.moveTo(this._canvas.width/2,this._canvas.height/2),this._ctx.lineTo(this._canvas.width/2-10,this._canvas.height/2),this._ctx.moveTo(this._canvas.width/2,this._canvas.height/2),this._ctx.lineTo(this._canvas.width/2,this._canvas.height/2+10),this._ctx.moveTo(this._canvas.width/2,this._canvas.height/2),this._ctx.lineTo(this._canvas.width/2,this._canvas.height/2-10),this._ctx.strokeStyle="red",this._ctx.stroke()}}class h{constructor(){this.stripWidth=2,this.screenStrips=[],this.screen=document.createElement("div"),this.width=320,this.height=200,this.screen.id="screen",this.skybox=document.createElement("div"),document.body.prepend(this.screen),this.init()}onResize(){const t=this.width/this.height,e=window.innerWidth,i=e/t;this.screen.style.width=e+"px",this.screen.style.height=i+"px"}init(){document.body.style.cursor="none";const t=new a(this.width,this.height),e=document.createElement("div");e.id="floor",this.skybox.id="ceiling";const i=document.createElement("div");i.id="level";const s=document.createElement("div");s.id="hand",this.screen.appendChild(e),this.screen.appendChild(this.skybox),this.screen.appendChild(i),this.screen.appendChild(s),this.screen.appendChild(t.canvas);for(let t=0;t<this.width;t+=this.stripWidth){const e=document.createElement("div");e.style.position="absolute",e.style.left=t+"px",e.style.width=this.stripWidth+"px",e.style.height="0px",e.style.overflow="hidden",e.style.backgroundColor="magenta";const s=new Image;s.src="public/walls.png",s.style.position="absolute",s.style.left="0px",e.appendChild(s),e.img=s,this.screenStrips.push(e),i.appendChild(e)}}drawRay(){}castSingleRay(){}drawMiniMap(){}updateMiniMap(){}}const c=class{constructor(t){this.keysPressed={},this.game=t,this.enablePointerLock(),this.init()}isKeyPressed(t){return this.keysPressed[t]}onKeydown(t){switch(t.code){case"KeyW":case"KeyS":case"KeyA":case"KeyD":case"ShiftLeft":this.keysPressed[t.code]=!0}}onKeyup(t){switch(console.log(t),t.code){case"KeyW":this.keysPressed[t.code]=!1;case"KeyS":this.keysPressed[t.code]=!1;break;case"KeyA":this.keysPressed[t.code]=!1;case"KeyD":case"ShiftLeft":this.keysPressed[t.code]=!1}}enablePointerLock(){document.addEventListener("click",(()=>{document.body.requestPointerLock()})),document.addEventListener("mousemove",this.onMouseMove.bind(this))}onMouseMove(t){const e=t.movementX*this.game.player.rotationSpeed;this.game.player.rotation+=e}init(){console.log("Controller initialized"),window.addEventListener("keydown",this.onKeydown.bind(this)),window.addEventListener("keyup",this.onKeyup.bind(this)),window.addEventListener("mousemove",this.onMouseMove.bind(this))}update(t){this.isKeyPressed("KeyW")&&(this.game.player.speed=1,this.game.player.direction.y=-1),this.isKeyPressed("KeyS")&&(this.game.player.speed=-1,this.game.player.direction.y=1),this.isKeyPressed("KeyA")&&(this.game.player.direction.x=1,this.game.player.speed=-1),this.isKeyPressed("KeyD")&&(this.game.player.direction.x=-1,this.game.player.speed=1),this.isKeyPressed("ShiftLeft")&&(this.game.player.speed*=2),this.isKeyPressed("Space")&&(this.game.player.speed=0,this.game.player.direction.y=0,this.game.player.direction.x=0),this.isKeyPressed("KeyW")||this.isKeyPressed("KeyS")||(this.game.player.direction.y=0),this.isKeyPressed("KeyA")||this.isKeyPressed("KeyD")||(this.game.player.direction.x=0),this.isKeyPressed("ShiftLeft")||(this.game.player.speed/=2)}};var l;!function(t){t[t.Playing=0]="Playing",t[t.GameOver=1]="GameOver",t[t.Paused=2]="Paused",t[t.Inventory=3]="Inventory",t[t.Trading=4]="Trading",t[t.MainMenu=5]="MainMenu"}(l||(l={}));const d=document.querySelector("#miniMap"),u=document.querySelector("#miniMapObjects");let p=0;const y=60*Math.PI/180/2,x=Math.ceil(160),f=160/Math.tan(y),v=2*Math.PI;let m=[],g=0,w=[],M=[],b=[];const k=document.querySelector("#debugScreen");const P=new class{constructor(){this.state="mainmenu",this.mapWidth=0,this.mapHeight=0,this.dayTime=0,this.drawMiniMap=()=>{d.width=8*this.mapWidth,d.height=8*this.mapHeight,d.style.width=8*this.mapWidth+"px";const t=d.getContext("2d");for(let e=0;e<this.mapHeight;e++)for(let i=0;i<this.mapWidth;i++)this.level.map[e][i]>0&&(t.fillStyle="black",t.fillRect(8*i,8*e,8,8))},this.updateMiniMap=()=>{u.width=8*this.mapWidth,u.height=8*this.mapHeight;const t=u.getContext("2d");t.clearRect(0,0,d.width,d.height),t.fillStyle="yellowgreen",t.fillRect(8*this.player.pos.x-2,8*this.player.pos.y-2,4,4),t.beginPath(),t.moveTo(8*this.player.pos.x,8*this.player.pos.y),t.lineTo(8*(this.player.pos.x+4*Math.cos(this.player.rotation)),8*(this.player.pos.y+4*Math.sin(this.player.rotation))),t.closePath(),t.stroke()},this.player=new o("player"),this.renderer=new h,this.controller=new c(this),this.state="mainmenu",this.level=n[0],this.setup()}initSprites(){w=[];for(var t=0;t<this.level.map.length;t++)w[t]=[];for(var e=0;e<M.length;e++){var i=M[e],s=b[i.type],n=document.createElement("img");n.src=s.img,n.style.display="none",n.style.position="absolute",i.visible=!1,i.block=s.block,i.img=n,w[i.y][i.x]=i,this.renderer.screen.appendChild(n)}}isBlocking(t,e){if(e<0||e>=this.mapHeight||t<0||t>=this.mapWidth)return!0;var i=Math.floor(t),s=Math.floor(e);return 0!=this.level.map[s][i]||!(!w[s][i]||!w[s][i].block)}checkCollision(t,e,i,s,n){var r={x:t,y:e};if(s<0||s>=this.mapHeight||i<0||i>=this.mapWidth)return r;var o=Math.floor(i),a=Math.floor(s);if(this.isBlocking(o,a))return r;r.x=i,r.y=s;var h,c,l=this.isBlocking(o,a-1),d=this.isBlocking(o,a+1),u=this.isBlocking(o-1,a),p=this.isBlocking(o+1,a);(l&&s-a<n&&(s=r.y=a+n),d&&a+1-s<n&&(s=r.y=a+1-n),u&&i-o<n&&(i=r.x=o+n),p&&o+1-i<n&&(i=r.x=o+1-n),!this.isBlocking(o-1,a-1)||l&&u)||(h=i-o)*h+(c=s-a)*c<n*n&&(h*h>c*c?i=r.x=o+n:s=r.y=a+n);!this.isBlocking(o+1,a-1)||l&&p||(h=i-(o+1))*h+(c=s-a)*c<n*n&&(h*h>c*c?i=r.x=o+1-n:s=r.y=a+n);!this.isBlocking(o-1,a+1)||d&&d||(h=i-o)*h+(c=s-(a+1))*c<n*n&&(h*h>c*c?i=r.x=o+n:s=r.y=a+1-n);!this.isBlocking(o+1,a+1)||d&&p||(h=i-(o+1))*h+(c=s-(a+1))*c<n*n&&(h*h>c*c?i=r.x=o+1-n:s=r.y=a+1-n);return r}castRays(){let t=0;for(let e=0;e<x;e++){const i=2*(-x/2+e),s=Math.sqrt(i*i+f*f),n=Math.asin(i/s);this.castSingleRay(this.player.rotation+n,t++)}}castSingleRay(t,e){(t%=v)<0&&(t+=v);var i=t>.75*v||t<.25*v,s=t<0||t>Math.PI,n=0,r=Math.sin(t),o=Math.cos(t),a=0;let h=0,c=0;var l=0;for(var d=i?1:-1,u=d*(M=r/o),p=i?Math.ceil(this.player.pos.x):Math.floor(this.player.pos.x),y=this.player.pos.y+(p-this.player.pos.x)*M;p>=0&&p<this.mapWidth&&y>=0&&y<this.mapHeight;){var x=p+(i?0:-1),g=y>>0;try{w[g][x]&&!w[g][x].visible&&(w[g][x].visible=!0,m.push(w[g][x]))}catch(t){}if(this.level.map[g][x]>0){let t=p-this.player.pos.x,e=y-this.player.pos.y;a=t*t+e*e,n=this.level.map[g][x],l=y%1,i||(l=1-l),p,y,h=x,c=g,!0;break}p+=d,y+=u}var M,b=s?-1:1,k=b*(M=o/r);for(y=s?Math.floor(this.player.pos.y):Math.ceil(this.player.pos.y),p=this.player.pos.x+(y-this.player.pos.y)*M;p>=0&&p<this.mapWidth&&y>=0&&y<this.mapHeight;){g=Math.floor(y+(s?-1:0)),x=p>>0;try{w[g][x]&&!w[g][x].visible&&(w[g][x].visible=!0,m.push(w[g][x]))}catch(t){}if(this.level.map[g][x]>0){var P=p-this.player.pos.x,S=y-this.player.pos.y,_=P*P+S*S;(!a||_<a)&&(a=_,p,y,c=g,h=x,n=this.level.map[g][x],l=p%1,s&&(l=1-l));break}p+=k,y+=b}if(a){var K=this.renderer.screenStrips[e];a=Math.sqrt(a),a*=Math.cos(this.player.rotation-t);var C=Math.round(f/a),T=2*C,D=Math.round((200-C)/2);let i=C;K.style.height=i+"px",K.style.top=D+"px",K.img.style.height=Math.floor(4*C)+"px",K.img.style.width=Math.floor(2*T)+"px",K.img.style.top=-Math.floor(C*(n-1))+"px";var A=Math.round(l*T);A>T-2&&(A=T-2),K.img.style.left=-A+"px"}}setup(){this.mapWidth=this.level.map[0].length,this.mapHeight=this.level.map.length,this.initSprites(),this.drawMiniMap(),document.body.style.imageRendering="pixelated",this.loop(0)}movePlayer(t,e){const i=t.moveSpeed*t.speed;let s=t.pos.x+Math.cos(t.rotation)*i*-e,n=t.pos.y+Math.sin(t.rotation)*i*-e;0!==t.direction.x&&(s=t.pos.x+Math.cos(t.rotation+Math.PI/2)*i*-e,n=t.pos.y+Math.sin(t.rotation+Math.PI/2)*i*-e);const r=this.checkCollision(t.pos.x,t.pos.y,s,n,.35);t.pos.x=r.x,t.pos.y=r.y,t.rotation<0&&(t.rotation+=2*Math.PI),t.rotation>=2*Math.PI&&(t.rotation-=2*Math.PI)}render(){this.dayTime<12?this.renderer.skybox.style.backgroundColor=`rgba(${99/(12/this.dayTime)}, \n    ${155/(12/this.dayTime)},\n    ${255/(12/this.dayTime)}\n    , 1)`:this.renderer.skybox.style.backgroundColor=`rgba(${99/(12/(24-this.dayTime))}, \n      ${155/(12/(24-this.dayTime))},\n      ${255/(12/(24-this.dayTime))}\n      , 1)`}update(t){this.controller.update(t),this.movePlayer(this.player,t),this.updateMiniMap(),this.castRays(),g+=-t,g>100&&(this.dayTime+=.01,this.dayTime>23&&(this.dayTime=0),g=0),k.innerText=`\n      PLAYER X: ${this.player.pos.x}\n      PLAYER Y: ${this.player.pos.y}\n      PLAYER ANGLE: ${this.player.rotation}\n      DT: ${t}\n    `}loop(t){const e=p-t;p=t,this.update(e),this.render(),requestAnimationFrame(this.loop.bind(this))}};window.game=P,P.setup()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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blAsS0FBS21QLFFBQVUsR0FFbkJQLEVBQVksR0FFaEJJLEVBQVkwRSxVQUFZLHFCQUNkMVQsS0FBSzROLE9BQU9sRSxJQUFJdkgsc0JBQ2hCbkMsS0FBSzROLE9BQU9sRSxJQUFJdEgsMEJBQ1pwQyxLQUFLNE4sT0FBTy9ELHVCQUN0QmlFLFNBRVIsQ0FDQXFGLEtBQUtRLEdBQ0QsTUFBTTdGLEVBQUtLLEVBQVd3RixFQUN0QnhGLEVBQVd3RixFQUNYM1QsS0FBSzZOLE9BQU9DLEdBQ1o5TixLQUFLeVQsU0FDTEcsc0JBQXNCNVQsS0FBS21ULEtBQUsxRixLQUFLek4sTUFDekMsR0N6WUpnSSxPQUFPK0UsS0FBT0EsRUFDZEEsRUFBSzZDLE8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taW5lY3JhZnQyNWQvLi9ub2RlX21vZHVsZXMvc2VlZHJhbmRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9taW5lY3JhZnQyNWQvLi9ub2RlX21vZHVsZXMvc2VlZHJhbmRvbS9saWIvYWxlYS5qcyIsIndlYnBhY2s6Ly9taW5lY3JhZnQyNWQvLi9ub2RlX21vZHVsZXMvc2VlZHJhbmRvbS9saWIvdHljaGVpLmpzIiwid2VicGFjazovL21pbmVjcmFmdDI1ZC8uL25vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2xpYi94b3IxMjguanMiLCJ3ZWJwYWNrOi8vbWluZWNyYWZ0MjVkLy4vbm9kZV9tb2R1bGVzL3NlZWRyYW5kb20vbGliL3hvcjQwOTYuanMiLCJ3ZWJwYWNrOi8vbWluZWNyYWZ0MjVkLy4vbm9kZV9tb2R1bGVzL3NlZWRyYW5kb20vbGliL3hvcnNoaWZ0Ny5qcyIsIndlYnBhY2s6Ly9taW5lY3JhZnQyNWQvLi9ub2RlX21vZHVsZXMvc2VlZHJhbmRvbS9saWIveG9yd293LmpzIiwid2VicGFjazovL21pbmVjcmFmdDI1ZC8uL25vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL3NlZWRyYW5kb20uanMiLCJ3ZWJwYWNrOi8vbWluZWNyYWZ0MjVkL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL21pbmVjcmFmdDI1ZC93ZWJwYWNrL3J1bnRpbWUvYW1kIGRlZmluZSIsIndlYnBhY2s6Ly9taW5lY3JhZnQyNWQvd2VicGFjay9ydW50aW1lL2FtZCBvcHRpb25zIiwid2VicGFjazovL21pbmVjcmFmdDI1ZC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9taW5lY3JhZnQyNWQvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL21pbmVjcmFmdDI1ZC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL21pbmVjcmFmdDI1ZC93ZWJwYWNrL3J1bnRpbWUvbm9kZSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovL21pbmVjcmFmdDI1ZC8uL3NyYy9sZXZlbHMuanMiLCJ3ZWJwYWNrOi8vbWluZWNyYWZ0MjVkLy4vc3JjL3BlcnNvbi50cyIsIndlYnBhY2s6Ly9taW5lY3JhZnQyNWQvLi9zcmMvcGxheWVyLnRzIiwid2VicGFjazovL21pbmVjcmFmdDI1ZC8uL3NyYy9yZW5kZXJlci50cyIsIndlYnBhY2s6Ly9taW5lY3JhZnQyNWQvLi9zcmMvY29udHJvbGxlci50cyIsIndlYnBhY2s6Ly9taW5lY3JhZnQyNWQvLi9zcmMvZ2FtZS50cyIsIndlYnBhY2s6Ly9taW5lY3JhZnQyNWQvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQSBsaWJyYXJ5IG9mIHNlZWRhYmxlIFJOR3MgaW1wbGVtZW50ZWQgaW4gSmF2YXNjcmlwdC5cbi8vXG4vLyBVc2FnZTpcbi8vXG4vLyB2YXIgc2VlZHJhbmRvbSA9IHJlcXVpcmUoJ3NlZWRyYW5kb20nKTtcbi8vIHZhciByYW5kb20gPSBzZWVkcmFuZG9tKDEpOyAvLyBvciBhbnkgc2VlZC5cbi8vIHZhciB4ID0gcmFuZG9tKCk7ICAgICAgIC8vIDAgPD0geCA8IDEuICBFdmVyeSBiaXQgaXMgcmFuZG9tLlxuLy8gdmFyIHggPSByYW5kb20ucXVpY2soKTsgLy8gMCA8PSB4IDwgMS4gIDMyIGJpdHMgb2YgcmFuZG9tbmVzcy5cblxuLy8gYWxlYSwgYSA1My1iaXQgbXVsdGlwbHktd2l0aC1jYXJyeSBnZW5lcmF0b3IgYnkgSm9oYW5uZXMgQmFhZ8O4ZS5cbi8vIFBlcmlvZDogfjJeMTE2XG4vLyBSZXBvcnRlZCB0byBwYXNzIGFsbCBCaWdDcnVzaCB0ZXN0cy5cbnZhciBhbGVhID0gcmVxdWlyZSgnLi9saWIvYWxlYScpO1xuXG4vLyB4b3IxMjgsIGEgcHVyZSB4b3Itc2hpZnQgZ2VuZXJhdG9yIGJ5IEdlb3JnZSBNYXJzYWdsaWEuXG4vLyBQZXJpb2Q6IDJeMTI4LTEuXG4vLyBSZXBvcnRlZCB0byBmYWlsOiBNYXRyaXhSYW5rIGFuZCBMaW5lYXJDb21wLlxudmFyIHhvcjEyOCA9IHJlcXVpcmUoJy4vbGliL3hvcjEyOCcpO1xuXG4vLyB4b3J3b3csIEdlb3JnZSBNYXJzYWdsaWEncyAxNjAtYml0IHhvci1zaGlmdCBjb21iaW5lZCBwbHVzIHdleWwuXG4vLyBQZXJpb2Q6IDJeMTkyLTJeMzJcbi8vIFJlcG9ydGVkIHRvIGZhaWw6IENvbGxpc2lvbk92ZXIsIFNpbXBQb2tlciwgYW5kIExpbmVhckNvbXAuXG52YXIgeG9yd293ID0gcmVxdWlyZSgnLi9saWIveG9yd293Jyk7XG5cbi8vIHhvcnNoaWZ0NywgYnkgRnJhbsOnb2lzIFBhbm5ldG9uIGFuZCBQaWVycmUgTCdlY3V5ZXIsIHRha2VzXG4vLyBhIGRpZmZlcmVudCBhcHByb2FjaDogaXQgYWRkcyByb2J1c3RuZXNzIGJ5IGFsbG93aW5nIG1vcmUgc2hpZnRzXG4vLyB0aGFuIE1hcnNhZ2xpYSdzIG9yaWdpbmFsIHRocmVlLiAgSXQgaXMgYSA3LXNoaWZ0IGdlbmVyYXRvclxuLy8gd2l0aCAyNTYgYml0cywgdGhhdCBwYXNzZXMgQmlnQ3J1c2ggd2l0aCBubyBzeXN0bWF0aWMgZmFpbHVyZXMuXG4vLyBQZXJpb2QgMl4yNTYtMS5cbi8vIE5vIHN5c3RlbWF0aWMgQmlnQ3J1c2ggZmFpbHVyZXMgcmVwb3J0ZWQuXG52YXIgeG9yc2hpZnQ3ID0gcmVxdWlyZSgnLi9saWIveG9yc2hpZnQ3Jyk7XG5cbi8vIHhvcjQwOTYsIGJ5IFJpY2hhcmQgQnJlbnQsIGlzIGEgNDA5Ni1iaXQgeG9yLXNoaWZ0IHdpdGggYVxuLy8gdmVyeSBsb25nIHBlcmlvZCB0aGF0IGFsc28gYWRkcyBhIFdleWwgZ2VuZXJhdG9yLiBJdCBhbHNvIHBhc3Nlc1xuLy8gQmlnQ3J1c2ggd2l0aCBubyBzeXN0ZW1hdGljIGZhaWx1cmVzLiAgSXRzIGxvbmcgcGVyaW9kIG1heVxuLy8gYmUgdXNlZnVsIGlmIHlvdSBoYXZlIG1hbnkgZ2VuZXJhdG9ycyBhbmQgbmVlZCB0byBhdm9pZFxuLy8gY29sbGlzaW9ucy5cbi8vIFBlcmlvZDogMl40MTI4LTJeMzIuXG4vLyBObyBzeXN0ZW1hdGljIEJpZ0NydXNoIGZhaWx1cmVzIHJlcG9ydGVkLlxudmFyIHhvcjQwOTYgPSByZXF1aXJlKCcuL2xpYi94b3I0MDk2Jyk7XG5cbi8vIFR5Y2hlLWksIGJ5IFNhbXVlbCBOZXZlcyBhbmQgRmlsaXBlIEFyYXVqbywgaXMgYSBiaXQtc2hpZnRpbmcgcmFuZG9tXG4vLyBudW1iZXIgZ2VuZXJhdG9yIGRlcml2ZWQgZnJvbSBDaGFDaGEsIGEgbW9kZXJuIHN0cmVhbSBjaXBoZXIuXG4vLyBodHRwczovL2VkZW4uZGVpLnVjLnB0L35zbmV2ZXMvcHVicy8yMDExLXNuZmEyLnBkZlxuLy8gUGVyaW9kOiB+Ml4xMjdcbi8vIE5vIHN5c3RlbWF0aWMgQmlnQ3J1c2ggZmFpbHVyZXMgcmVwb3J0ZWQuXG52YXIgdHljaGVpID0gcmVxdWlyZSgnLi9saWIvdHljaGVpJyk7XG5cbi8vIFRoZSBvcmlnaW5hbCBBUkM0LWJhc2VkIHBybmcgaW5jbHVkZWQgaW4gdGhpcyBsaWJyYXJ5LlxuLy8gUGVyaW9kOiB+Ml4xNjAwXG52YXIgc3IgPSByZXF1aXJlKCcuL3NlZWRyYW5kb20nKTtcblxuc3IuYWxlYSA9IGFsZWE7XG5zci54b3IxMjggPSB4b3IxMjg7XG5zci54b3J3b3cgPSB4b3J3b3c7XG5zci54b3JzaGlmdDcgPSB4b3JzaGlmdDc7XG5zci54b3I0MDk2ID0geG9yNDA5NjtcbnNyLnR5Y2hlaSA9IHR5Y2hlaTtcblxubW9kdWxlLmV4cG9ydHMgPSBzcjtcbiIsIi8vIEEgcG9ydCBvZiBhbiBhbGdvcml0aG0gYnkgSm9oYW5uZXMgQmFhZ8O4ZSA8YmFhZ29lQGJhYWdvZS5jb20+LCAyMDEwXG4vLyBodHRwOi8vYmFhZ29lLmNvbS9lbi9SYW5kb21NdXNpbmdzL2phdmFzY3JpcHQvXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbnF1aW5sYW4vYmV0dGVyLXJhbmRvbS1udW1iZXJzLWZvci1qYXZhc2NyaXB0LW1pcnJvclxuLy8gT3JpZ2luYWwgd29yayBpcyB1bmRlciBNSVQgbGljZW5zZSAtXG5cbi8vIENvcHlyaWdodCAoQykgMjAxMCBieSBKb2hhbm5lcyBCYWFnw7hlIDxiYWFnb2VAYmFhZ29lLm9yZz5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5cblxuKGZ1bmN0aW9uKGdsb2JhbCwgbW9kdWxlLCBkZWZpbmUpIHtcblxuZnVuY3Rpb24gQWxlYShzZWVkKSB7XG4gIHZhciBtZSA9IHRoaXMsIG1hc2ggPSBNYXNoKCk7XG5cbiAgbWUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0ID0gMjA5MTYzOSAqIG1lLnMwICsgbWUuYyAqIDIuMzI4MzA2NDM2NTM4Njk2M2UtMTA7IC8vIDJeLTMyXG4gICAgbWUuczAgPSBtZS5zMTtcbiAgICBtZS5zMSA9IG1lLnMyO1xuICAgIHJldHVybiBtZS5zMiA9IHQgLSAobWUuYyA9IHQgfCAwKTtcbiAgfTtcblxuICAvLyBBcHBseSB0aGUgc2VlZGluZyBhbGdvcml0aG0gZnJvbSBCYWFnb2UuXG4gIG1lLmMgPSAxO1xuICBtZS5zMCA9IG1hc2goJyAnKTtcbiAgbWUuczEgPSBtYXNoKCcgJyk7XG4gIG1lLnMyID0gbWFzaCgnICcpO1xuICBtZS5zMCAtPSBtYXNoKHNlZWQpO1xuICBpZiAobWUuczAgPCAwKSB7IG1lLnMwICs9IDE7IH1cbiAgbWUuczEgLT0gbWFzaChzZWVkKTtcbiAgaWYgKG1lLnMxIDwgMCkgeyBtZS5zMSArPSAxOyB9XG4gIG1lLnMyIC09IG1hc2goc2VlZCk7XG4gIGlmIChtZS5zMiA8IDApIHsgbWUuczIgKz0gMTsgfVxuICBtYXNoID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gY29weShmLCB0KSB7XG4gIHQuYyA9IGYuYztcbiAgdC5zMCA9IGYuczA7XG4gIHQuczEgPSBmLnMxO1xuICB0LnMyID0gZi5zMjtcbiAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIGltcGwoc2VlZCwgb3B0cykge1xuICB2YXIgeGcgPSBuZXcgQWxlYShzZWVkKSxcbiAgICAgIHN0YXRlID0gb3B0cyAmJiBvcHRzLnN0YXRlLFxuICAgICAgcHJuZyA9IHhnLm5leHQ7XG4gIHBybmcuaW50MzIgPSBmdW5jdGlvbigpIHsgcmV0dXJuICh4Zy5uZXh0KCkgKiAweDEwMDAwMDAwMCkgfCAwOyB9XG4gIHBybmcuZG91YmxlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHBybmcoKSArIChwcm5nKCkgKiAweDIwMDAwMCB8IDApICogMS4xMTAyMjMwMjQ2MjUxNTY1ZS0xNjsgLy8gMl4tNTNcbiAgfTtcbiAgcHJuZy5xdWljayA9IHBybmc7XG4gIGlmIChzdGF0ZSkge1xuICAgIGlmICh0eXBlb2Yoc3RhdGUpID09ICdvYmplY3QnKSBjb3B5KHN0YXRlLCB4Zyk7XG4gICAgcHJuZy5zdGF0ZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29weSh4Zywge30pOyB9XG4gIH1cbiAgcmV0dXJuIHBybmc7XG59XG5cbmZ1bmN0aW9uIE1hc2goKSB7XG4gIHZhciBuID0gMHhlZmM4MjQ5ZDtcblxuICB2YXIgbWFzaCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBkYXRhID0gU3RyaW5nKGRhdGEpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgbiArPSBkYXRhLmNoYXJDb2RlQXQoaSk7XG4gICAgICB2YXIgaCA9IDAuMDI1MTk2MDMyODI0MTY5MzggKiBuO1xuICAgICAgbiA9IGggPj4+IDA7XG4gICAgICBoIC09IG47XG4gICAgICBoICo9IG47XG4gICAgICBuID0gaCA+Pj4gMDtcbiAgICAgIGggLT0gbjtcbiAgICAgIG4gKz0gaCAqIDB4MTAwMDAwMDAwOyAvLyAyXjMyXG4gICAgfVxuICAgIHJldHVybiAobiA+Pj4gMCkgKiAyLjMyODMwNjQzNjUzODY5NjNlLTEwOyAvLyAyXi0zMlxuICB9O1xuXG4gIHJldHVybiBtYXNoO1xufVxuXG5cbmlmIChtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBpbXBsO1xufSBlbHNlIGlmIChkZWZpbmUgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBpbXBsOyB9KTtcbn0gZWxzZSB7XG4gIHRoaXMuYWxlYSA9IGltcGw7XG59XG5cbn0pKFxuICB0aGlzLFxuICAodHlwZW9mIG1vZHVsZSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlLCAgICAvLyBwcmVzZW50IGluIG5vZGUuanNcbiAgKHR5cGVvZiBkZWZpbmUpID09ICdmdW5jdGlvbicgJiYgZGVmaW5lICAgLy8gcHJlc2VudCB3aXRoIGFuIEFNRCBsb2FkZXJcbik7XG5cblxuIiwiLy8gQSBKYXZhc2NyaXB0IGltcGxlbWVudGFpb24gb2YgdGhlIFwiVHljaGUtaVwiIHBybmcgYWxnb3JpdGhtIGJ5XG4vLyBTYW11ZWwgTmV2ZXMgYW5kIEZpbGlwZSBBcmF1am8uXG4vLyBTZWUgaHR0cHM6Ly9lZGVuLmRlaS51Yy5wdC9+c25ldmVzL3B1YnMvMjAxMS1zbmZhMi5wZGZcblxuKGZ1bmN0aW9uKGdsb2JhbCwgbW9kdWxlLCBkZWZpbmUpIHtcblxuZnVuY3Rpb24gWG9yR2VuKHNlZWQpIHtcbiAgdmFyIG1lID0gdGhpcywgc3Ryc2VlZCA9ICcnO1xuXG4gIC8vIFNldCB1cCBnZW5lcmF0b3IgZnVuY3Rpb24uXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYiA9IG1lLmIsIGMgPSBtZS5jLCBkID0gbWUuZCwgYSA9IG1lLmE7XG4gICAgYiA9IChiIDw8IDI1KSBeIChiID4+PiA3KSBeIGM7XG4gICAgYyA9IChjIC0gZCkgfCAwO1xuICAgIGQgPSAoZCA8PCAyNCkgXiAoZCA+Pj4gOCkgXiBhO1xuICAgIGEgPSAoYSAtIGIpIHwgMDtcbiAgICBtZS5iID0gYiA9IChiIDw8IDIwKSBeIChiID4+PiAxMikgXiBjO1xuICAgIG1lLmMgPSBjID0gKGMgLSBkKSB8IDA7XG4gICAgbWUuZCA9IChkIDw8IDE2KSBeIChjID4+PiAxNikgXiBhO1xuICAgIHJldHVybiBtZS5hID0gKGEgLSBiKSB8IDA7XG4gIH07XG5cbiAgLyogVGhlIGZvbGxvd2luZyBpcyBub24taW52ZXJ0ZWQgdHljaGUsIHdoaWNoIGhhcyBiZXR0ZXIgaW50ZXJuYWxcbiAgICogYml0IGRpZmZ1c2lvbiwgYnV0IHdoaWNoIGlzIGFib3V0IDI1JSBzbG93ZXIgdGhhbiB0eWNoZS1pIGluIEpTLlxuICBtZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGEgPSBtZS5hLCBiID0gbWUuYiwgYyA9IG1lLmMsIGQgPSBtZS5kO1xuICAgIGEgPSAobWUuYSArIG1lLmIgfCAwKSA+Pj4gMDtcbiAgICBkID0gbWUuZCBeIGE7IGQgPSBkIDw8IDE2IF4gZCA+Pj4gMTY7XG4gICAgYyA9IG1lLmMgKyBkIHwgMDtcbiAgICBiID0gbWUuYiBeIGM7IGIgPSBiIDw8IDEyIF4gZCA+Pj4gMjA7XG4gICAgbWUuYSA9IGEgPSBhICsgYiB8IDA7XG4gICAgZCA9IGQgXiBhOyBtZS5kID0gZCA9IGQgPDwgOCBeIGQgPj4+IDI0O1xuICAgIG1lLmMgPSBjID0gYyArIGQgfCAwO1xuICAgIGIgPSBiIF4gYztcbiAgICByZXR1cm4gbWUuYiA9IChiIDw8IDcgXiBiID4+PiAyNSk7XG4gIH1cbiAgKi9cblxuICBtZS5hID0gMDtcbiAgbWUuYiA9IDA7XG4gIG1lLmMgPSAyNjU0NDM1NzY5IHwgMDtcbiAgbWUuZCA9IDEzNjcxMzA1NTE7XG5cbiAgaWYgKHNlZWQgPT09IE1hdGguZmxvb3Ioc2VlZCkpIHtcbiAgICAvLyBJbnRlZ2VyIHNlZWQuXG4gICAgbWUuYSA9IChzZWVkIC8gMHgxMDAwMDAwMDApIHwgMDtcbiAgICBtZS5iID0gc2VlZCB8IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gU3RyaW5nIHNlZWQuXG4gICAgc3Ryc2VlZCArPSBzZWVkO1xuICB9XG5cbiAgLy8gTWl4IGluIHN0cmluZyBzZWVkLCB0aGVuIGRpc2NhcmQgYW4gaW5pdGlhbCBiYXRjaCBvZiA2NCB2YWx1ZXMuXG4gIGZvciAodmFyIGsgPSAwOyBrIDwgc3Ryc2VlZC5sZW5ndGggKyAyMDsgaysrKSB7XG4gICAgbWUuYiBePSBzdHJzZWVkLmNoYXJDb2RlQXQoaykgfCAwO1xuICAgIG1lLm5leHQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb3B5KGYsIHQpIHtcbiAgdC5hID0gZi5hO1xuICB0LmIgPSBmLmI7XG4gIHQuYyA9IGYuYztcbiAgdC5kID0gZi5kO1xuICByZXR1cm4gdDtcbn07XG5cbmZ1bmN0aW9uIGltcGwoc2VlZCwgb3B0cykge1xuICB2YXIgeGcgPSBuZXcgWG9yR2VuKHNlZWQpLFxuICAgICAgc3RhdGUgPSBvcHRzICYmIG9wdHMuc3RhdGUsXG4gICAgICBwcm5nID0gZnVuY3Rpb24oKSB7IHJldHVybiAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwOyB9O1xuICBwcm5nLmRvdWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIGRvIHtcbiAgICAgIHZhciB0b3AgPSB4Zy5uZXh0KCkgPj4+IDExLFxuICAgICAgICAgIGJvdCA9ICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDAsXG4gICAgICAgICAgcmVzdWx0ID0gKHRvcCArIGJvdCkgLyAoMSA8PCAyMSk7XG4gICAgfSB3aGlsZSAocmVzdWx0ID09PSAwKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBwcm5nLmludDMyID0geGcubmV4dDtcbiAgcHJuZy5xdWljayA9IHBybmc7XG4gIGlmIChzdGF0ZSkge1xuICAgIGlmICh0eXBlb2Yoc3RhdGUpID09ICdvYmplY3QnKSBjb3B5KHN0YXRlLCB4Zyk7XG4gICAgcHJuZy5zdGF0ZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29weSh4Zywge30pOyB9XG4gIH1cbiAgcmV0dXJuIHBybmc7XG59XG5cbmlmIChtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBpbXBsO1xufSBlbHNlIGlmIChkZWZpbmUgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBpbXBsOyB9KTtcbn0gZWxzZSB7XG4gIHRoaXMudHljaGVpID0gaW1wbDtcbn1cblxufSkoXG4gIHRoaXMsXG4gICh0eXBlb2YgbW9kdWxlKSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUsICAgIC8vIHByZXNlbnQgaW4gbm9kZS5qc1xuICAodHlwZW9mIGRlZmluZSkgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUgICAvLyBwcmVzZW50IHdpdGggYW4gQU1EIGxvYWRlclxuKTtcblxuXG4iLCIvLyBBIEphdmFzY3JpcHQgaW1wbGVtZW50YWlvbiBvZiB0aGUgXCJ4b3IxMjhcIiBwcm5nIGFsZ29yaXRobSBieVxuLy8gR2VvcmdlIE1hcnNhZ2xpYS4gIFNlZSBodHRwOi8vd3d3LmpzdGF0c29mdC5vcmcvdjA4L2kxNC9wYXBlclxuXG4oZnVuY3Rpb24oZ2xvYmFsLCBtb2R1bGUsIGRlZmluZSkge1xuXG5mdW5jdGlvbiBYb3JHZW4oc2VlZCkge1xuICB2YXIgbWUgPSB0aGlzLCBzdHJzZWVkID0gJyc7XG5cbiAgbWUueCA9IDA7XG4gIG1lLnkgPSAwO1xuICBtZS56ID0gMDtcbiAgbWUudyA9IDA7XG5cbiAgLy8gU2V0IHVwIGdlbmVyYXRvciBmdW5jdGlvbi5cbiAgbWUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0ID0gbWUueCBeIChtZS54IDw8IDExKTtcbiAgICBtZS54ID0gbWUueTtcbiAgICBtZS55ID0gbWUuejtcbiAgICBtZS56ID0gbWUudztcbiAgICByZXR1cm4gbWUudyBePSAobWUudyA+Pj4gMTkpIF4gdCBeICh0ID4+PiA4KTtcbiAgfTtcblxuICBpZiAoc2VlZCA9PT0gKHNlZWQgfCAwKSkge1xuICAgIC8vIEludGVnZXIgc2VlZC5cbiAgICBtZS54ID0gc2VlZDtcbiAgfSBlbHNlIHtcbiAgICAvLyBTdHJpbmcgc2VlZC5cbiAgICBzdHJzZWVkICs9IHNlZWQ7XG4gIH1cblxuICAvLyBNaXggaW4gc3RyaW5nIHNlZWQsIHRoZW4gZGlzY2FyZCBhbiBpbml0aWFsIGJhdGNoIG9mIDY0IHZhbHVlcy5cbiAgZm9yICh2YXIgayA9IDA7IGsgPCBzdHJzZWVkLmxlbmd0aCArIDY0OyBrKyspIHtcbiAgICBtZS54IF49IHN0cnNlZWQuY2hhckNvZGVBdChrKSB8IDA7XG4gICAgbWUubmV4dCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvcHkoZiwgdCkge1xuICB0LnggPSBmLng7XG4gIHQueSA9IGYueTtcbiAgdC56ID0gZi56O1xuICB0LncgPSBmLnc7XG4gIHJldHVybiB0O1xufVxuXG5mdW5jdGlvbiBpbXBsKHNlZWQsIG9wdHMpIHtcbiAgdmFyIHhnID0gbmV3IFhvckdlbihzZWVkKSxcbiAgICAgIHN0YXRlID0gb3B0cyAmJiBvcHRzLnN0YXRlLFxuICAgICAgcHJuZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMDsgfTtcbiAgcHJuZy5kb3VibGUgPSBmdW5jdGlvbigpIHtcbiAgICBkbyB7XG4gICAgICB2YXIgdG9wID0geGcubmV4dCgpID4+PiAxMSxcbiAgICAgICAgICBib3QgPSAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwLFxuICAgICAgICAgIHJlc3VsdCA9ICh0b3AgKyBib3QpIC8gKDEgPDwgMjEpO1xuICAgIH0gd2hpbGUgKHJlc3VsdCA9PT0gMCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcHJuZy5pbnQzMiA9IHhnLm5leHQ7XG4gIHBybmcucXVpY2sgPSBwcm5nO1xuICBpZiAoc3RhdGUpIHtcbiAgICBpZiAodHlwZW9mKHN0YXRlKSA9PSAnb2JqZWN0JykgY29weShzdGF0ZSwgeGcpO1xuICAgIHBybmcuc3RhdGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvcHkoeGcsIHt9KTsgfVxuICB9XG4gIHJldHVybiBwcm5nO1xufVxuXG5pZiAobW9kdWxlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gaW1wbDtcbn0gZWxzZSBpZiAoZGVmaW5lICYmIGRlZmluZS5hbWQpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gaW1wbDsgfSk7XG59IGVsc2Uge1xuICB0aGlzLnhvcjEyOCA9IGltcGw7XG59XG5cbn0pKFxuICB0aGlzLFxuICAodHlwZW9mIG1vZHVsZSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlLCAgICAvLyBwcmVzZW50IGluIG5vZGUuanNcbiAgKHR5cGVvZiBkZWZpbmUpID09ICdmdW5jdGlvbicgJiYgZGVmaW5lICAgLy8gcHJlc2VudCB3aXRoIGFuIEFNRCBsb2FkZXJcbik7XG5cblxuIiwiLy8gQSBKYXZhc2NyaXB0IGltcGxlbWVudGFpb24gb2YgUmljaGFyZCBCcmVudCdzIFhvcmdlbnMgeG9yNDA5NiBhbGdvcml0aG0uXG4vL1xuLy8gVGhpcyBmYXN0IG5vbi1jcnlwdG9ncmFwaGljIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yIGlzIGRlc2lnbmVkIGZvclxuLy8gdXNlIGluIE1vbnRlLUNhcmxvIGFsZ29yaXRobXMuIEl0IGNvbWJpbmVzIGEgbG9uZy1wZXJpb2QgeG9yc2hpZnRcbi8vIGdlbmVyYXRvciB3aXRoIGEgV2V5bCBnZW5lcmF0b3IsIGFuZCBpdCBwYXNzZXMgYWxsIGNvbW1vbiBiYXR0ZXJpZXNcbi8vIG9mIHN0YXN0aWNpYWwgdGVzdHMgZm9yIHJhbmRvbW5lc3Mgd2hpbGUgY29uc3VtaW5nIG9ubHkgYSBmZXcgbmFub3NlY29uZHNcbi8vIGZvciBlYWNoIHBybmcgZ2VuZXJhdGVkLiAgRm9yIGJhY2tncm91bmQgb24gdGhlIGdlbmVyYXRvciwgc2VlIEJyZW50J3Ncbi8vIHBhcGVyOiBcIlNvbWUgbG9uZy1wZXJpb2QgcmFuZG9tIG51bWJlciBnZW5lcmF0b3JzIHVzaW5nIHNoaWZ0cyBhbmQgeG9ycy5cIlxuLy8gaHR0cDovL2FyeGl2Lm9yZy9wZGYvMTAwNC4zMTE1djEucGRmXG4vL1xuLy8gVXNhZ2U6XG4vL1xuLy8gdmFyIHhvcjQwOTYgPSByZXF1aXJlKCd4b3I0MDk2Jyk7XG4vLyByYW5kb20gPSB4b3I0MDk2KDEpOyAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNlZWQgd2l0aCBpbnQzMiBvciBzdHJpbmcuXG4vLyBhc3NlcnQuZXF1YWwocmFuZG9tKCksIDAuMTUyMDQzNjQ1MDUzODU0Nyk7IC8vICgwLCAxKSByYW5nZSwgNTMgYml0cy5cbi8vIGFzc2VydC5lcXVhbChyYW5kb20uaW50MzIoKSwgMTgwNjUzNDg5Nyk7ICAgLy8gc2lnbmVkIGludDMyLCAzMiBiaXRzLlxuLy9cbi8vIEZvciBub256ZXJvIG51bWVyaWMga2V5cywgdGhpcyBpbXBlbGVtZW50YXRpb24gcHJvdmlkZXMgYSBzZXF1ZW5jZVxuLy8gaWRlbnRpY2FsIHRvIHRoYXQgYnkgQnJlbnQncyB4b3JnZW5zIDMgaW1wbGVtZW50YWlvbiBpbiBDLiAgVGhpc1xuLy8gaW1wbGVtZW50YXRpb24gYWxzbyBwcm92aWRlcyBmb3IgaW5pdGFsaXppbmcgdGhlIGdlbmVyYXRvciB3aXRoXG4vLyBzdHJpbmcgc2VlZHMsIG9yIGZvciBzYXZpbmcgYW5kIHJlc3RvcmluZyB0aGUgc3RhdGUgb2YgdGhlIGdlbmVyYXRvci5cbi8vXG4vLyBPbiBDaHJvbWUsIHRoaXMgcHJuZyBiZW5jaG1hcmtzIGFib3V0IDIuMSB0aW1lcyBzbG93ZXIgdGhhblxuLy8gSmF2YXNjcmlwdCdzIGJ1aWx0LWluIE1hdGgucmFuZG9tKCkuXG5cbihmdW5jdGlvbihnbG9iYWwsIG1vZHVsZSwgZGVmaW5lKSB7XG5cbmZ1bmN0aW9uIFhvckdlbihzZWVkKSB7XG4gIHZhciBtZSA9IHRoaXM7XG5cbiAgLy8gU2V0IHVwIGdlbmVyYXRvciBmdW5jdGlvbi5cbiAgbWUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB3ID0gbWUudyxcbiAgICAgICAgWCA9IG1lLlgsIGkgPSBtZS5pLCB0LCB2O1xuICAgIC8vIFVwZGF0ZSBXZXlsIGdlbmVyYXRvci5cbiAgICBtZS53ID0gdyA9ICh3ICsgMHg2MWM4ODY0NykgfCAwO1xuICAgIC8vIFVwZGF0ZSB4b3IgZ2VuZXJhdG9yLlxuICAgIHYgPSBYWyhpICsgMzQpICYgMTI3XTtcbiAgICB0ID0gWFtpID0gKChpICsgMSkgJiAxMjcpXTtcbiAgICB2IF49IHYgPDwgMTM7XG4gICAgdCBePSB0IDw8IDE3O1xuICAgIHYgXj0gdiA+Pj4gMTU7XG4gICAgdCBePSB0ID4+PiAxMjtcbiAgICAvLyBVcGRhdGUgWG9yIGdlbmVyYXRvciBhcnJheSBzdGF0ZS5cbiAgICB2ID0gWFtpXSA9IHYgXiB0O1xuICAgIG1lLmkgPSBpO1xuICAgIC8vIFJlc3VsdCBpcyB0aGUgY29tYmluYXRpb24uXG4gICAgcmV0dXJuICh2ICsgKHcgXiAodyA+Pj4gMTYpKSkgfCAwO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGluaXQobWUsIHNlZWQpIHtcbiAgICB2YXIgdCwgdiwgaSwgaiwgdywgWCA9IFtdLCBsaW1pdCA9IDEyODtcbiAgICBpZiAoc2VlZCA9PT0gKHNlZWQgfCAwKSkge1xuICAgICAgLy8gTnVtZXJpYyBzZWVkcyBpbml0aWFsaXplIHYsIHdoaWNoIGlzIHVzZWQgdG8gZ2VuZXJhdGVzIFguXG4gICAgICB2ID0gc2VlZDtcbiAgICAgIHNlZWQgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTdHJpbmcgc2VlZHMgYXJlIG1peGVkIGludG8gdiBhbmQgWCBvbmUgY2hhcmFjdGVyIGF0IGEgdGltZS5cbiAgICAgIHNlZWQgPSBzZWVkICsgJ1xcMCc7XG4gICAgICB2ID0gMDtcbiAgICAgIGxpbWl0ID0gTWF0aC5tYXgobGltaXQsIHNlZWQubGVuZ3RoKTtcbiAgICB9XG4gICAgLy8gSW5pdGlhbGl6ZSBjaXJjdWxhciBhcnJheSBhbmQgd2V5bCB2YWx1ZS5cbiAgICBmb3IgKGkgPSAwLCBqID0gLTMyOyBqIDwgbGltaXQ7ICsraikge1xuICAgICAgLy8gUHV0IHRoZSB1bmljb2RlIGNoYXJhY3RlcnMgaW50byB0aGUgYXJyYXksIGFuZCBzaHVmZmxlIHRoZW0uXG4gICAgICBpZiAoc2VlZCkgdiBePSBzZWVkLmNoYXJDb2RlQXQoKGogKyAzMikgJSBzZWVkLmxlbmd0aCk7XG4gICAgICAvLyBBZnRlciAzMiBzaHVmZmxlcywgdGFrZSB2IGFzIHRoZSBzdGFydGluZyB3IHZhbHVlLlxuICAgICAgaWYgKGogPT09IDApIHcgPSB2O1xuICAgICAgdiBePSB2IDw8IDEwO1xuICAgICAgdiBePSB2ID4+PiAxNTtcbiAgICAgIHYgXj0gdiA8PCA0O1xuICAgICAgdiBePSB2ID4+PiAxMztcbiAgICAgIGlmIChqID49IDApIHtcbiAgICAgICAgdyA9ICh3ICsgMHg2MWM4ODY0NykgfCAwOyAgICAgLy8gV2V5bC5cbiAgICAgICAgdCA9IChYW2ogJiAxMjddIF49ICh2ICsgdykpOyAgLy8gQ29tYmluZSB4b3IgYW5kIHdleWwgdG8gaW5pdCBhcnJheS5cbiAgICAgICAgaSA9ICgwID09IHQpID8gaSArIDEgOiAwOyAgICAgLy8gQ291bnQgemVyb2VzLlxuICAgICAgfVxuICAgIH1cbiAgICAvLyBXZSBoYXZlIGRldGVjdGVkIGFsbCB6ZXJvZXM7IG1ha2UgdGhlIGtleSBub256ZXJvLlxuICAgIGlmIChpID49IDEyOCkge1xuICAgICAgWFsoc2VlZCAmJiBzZWVkLmxlbmd0aCB8fCAwKSAmIDEyN10gPSAtMTtcbiAgICB9XG4gICAgLy8gUnVuIHRoZSBnZW5lcmF0b3IgNTEyIHRpbWVzIHRvIGZ1cnRoZXIgbWl4IHRoZSBzdGF0ZSBiZWZvcmUgdXNpbmcgaXQuXG4gICAgLy8gRmFjdG9yaW5nIHRoaXMgYXMgYSBmdW5jdGlvbiBzbG93cyB0aGUgbWFpbiBnZW5lcmF0b3IsIHNvIGl0IGlzIGp1c3RcbiAgICAvLyB1bnJvbGxlZCBoZXJlLiAgVGhlIHdleWwgZ2VuZXJhdG9yIGlzIG5vdCBhZHZhbmNlZCB3aGlsZSB3YXJtaW5nIHVwLlxuICAgIGkgPSAxMjc7XG4gICAgZm9yIChqID0gNCAqIDEyODsgaiA+IDA7IC0taikge1xuICAgICAgdiA9IFhbKGkgKyAzNCkgJiAxMjddO1xuICAgICAgdCA9IFhbaSA9ICgoaSArIDEpICYgMTI3KV07XG4gICAgICB2IF49IHYgPDwgMTM7XG4gICAgICB0IF49IHQgPDwgMTc7XG4gICAgICB2IF49IHYgPj4+IDE1O1xuICAgICAgdCBePSB0ID4+PiAxMjtcbiAgICAgIFhbaV0gPSB2IF4gdDtcbiAgICB9XG4gICAgLy8gU3RvcmluZyBzdGF0ZSBhcyBvYmplY3QgbWVtYmVycyBpcyBmYXN0ZXIgdGhhbiB1c2luZyBjbG9zdXJlIHZhcmlhYmxlcy5cbiAgICBtZS53ID0gdztcbiAgICBtZS5YID0gWDtcbiAgICBtZS5pID0gaTtcbiAgfVxuXG4gIGluaXQobWUsIHNlZWQpO1xufVxuXG5mdW5jdGlvbiBjb3B5KGYsIHQpIHtcbiAgdC5pID0gZi5pO1xuICB0LncgPSBmLnc7XG4gIHQuWCA9IGYuWC5zbGljZSgpO1xuICByZXR1cm4gdDtcbn07XG5cbmZ1bmN0aW9uIGltcGwoc2VlZCwgb3B0cykge1xuICBpZiAoc2VlZCA9PSBudWxsKSBzZWVkID0gKyhuZXcgRGF0ZSk7XG4gIHZhciB4ZyA9IG5ldyBYb3JHZW4oc2VlZCksXG4gICAgICBzdGF0ZSA9IG9wdHMgJiYgb3B0cy5zdGF0ZSxcbiAgICAgIHBybmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDA7IH07XG4gIHBybmcuZG91YmxlID0gZnVuY3Rpb24oKSB7XG4gICAgZG8ge1xuICAgICAgdmFyIHRvcCA9IHhnLm5leHQoKSA+Pj4gMTEsXG4gICAgICAgICAgYm90ID0gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMCxcbiAgICAgICAgICByZXN1bHQgPSAodG9wICsgYm90KSAvICgxIDw8IDIxKTtcbiAgICB9IHdoaWxlIChyZXN1bHQgPT09IDApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHBybmcuaW50MzIgPSB4Zy5uZXh0O1xuICBwcm5nLnF1aWNrID0gcHJuZztcbiAgaWYgKHN0YXRlKSB7XG4gICAgaWYgKHN0YXRlLlgpIGNvcHkoc3RhdGUsIHhnKTtcbiAgICBwcm5nLnN0YXRlID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb3B5KHhnLCB7fSk7IH1cbiAgfVxuICByZXR1cm4gcHJuZztcbn1cblxuaWYgKG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGltcGw7XG59IGVsc2UgaWYgKGRlZmluZSAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIGltcGw7IH0pO1xufSBlbHNlIHtcbiAgdGhpcy54b3I0MDk2ID0gaW1wbDtcbn1cblxufSkoXG4gIHRoaXMsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdpbmRvdyBvYmplY3Qgb3IgZ2xvYmFsXG4gICh0eXBlb2YgbW9kdWxlKSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUsICAgIC8vIHByZXNlbnQgaW4gbm9kZS5qc1xuICAodHlwZW9mIGRlZmluZSkgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUgICAvLyBwcmVzZW50IHdpdGggYW4gQU1EIGxvYWRlclxuKTtcbiIsIi8vIEEgSmF2YXNjcmlwdCBpbXBsZW1lbnRhaW9uIG9mIHRoZSBcInhvcnNoaWZ0N1wiIGFsZ29yaXRobSBieVxuLy8gRnJhbsOnb2lzIFBhbm5ldG9uIGFuZCBQaWVycmUgTCdlY3V5ZXI6XG4vLyBcIk9uIHRoZSBYb3Jnc2hpZnQgUmFuZG9tIE51bWJlciBHZW5lcmF0b3JzXCJcbi8vIGh0dHA6Ly9zYWx1Yy5lbmdyLnVjb25uLmVkdS9yZWZzL2NyeXB0by9ybmcvcGFubmV0b24wNW9udGhleG9yc2hpZnQucGRmXG5cbihmdW5jdGlvbihnbG9iYWwsIG1vZHVsZSwgZGVmaW5lKSB7XG5cbmZ1bmN0aW9uIFhvckdlbihzZWVkKSB7XG4gIHZhciBtZSA9IHRoaXM7XG5cbiAgLy8gU2V0IHVwIGdlbmVyYXRvciBmdW5jdGlvbi5cbiAgbWUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIFVwZGF0ZSB4b3IgZ2VuZXJhdG9yLlxuICAgIHZhciBYID0gbWUueCwgaSA9IG1lLmksIHQsIHYsIHc7XG4gICAgdCA9IFhbaV07IHQgXj0gKHQgPj4+IDcpOyB2ID0gdCBeICh0IDw8IDI0KTtcbiAgICB0ID0gWFsoaSArIDEpICYgN107IHYgXj0gdCBeICh0ID4+PiAxMCk7XG4gICAgdCA9IFhbKGkgKyAzKSAmIDddOyB2IF49IHQgXiAodCA+Pj4gMyk7XG4gICAgdCA9IFhbKGkgKyA0KSAmIDddOyB2IF49IHQgXiAodCA8PCA3KTtcbiAgICB0ID0gWFsoaSArIDcpICYgN107IHQgPSB0IF4gKHQgPDwgMTMpOyB2IF49IHQgXiAodCA8PCA5KTtcbiAgICBYW2ldID0gdjtcbiAgICBtZS5pID0gKGkgKyAxKSAmIDc7XG4gICAgcmV0dXJuIHY7XG4gIH07XG5cbiAgZnVuY3Rpb24gaW5pdChtZSwgc2VlZCkge1xuICAgIHZhciBqLCB3LCBYID0gW107XG5cbiAgICBpZiAoc2VlZCA9PT0gKHNlZWQgfCAwKSkge1xuICAgICAgLy8gU2VlZCBzdGF0ZSBhcnJheSB1c2luZyBhIDMyLWJpdCBpbnRlZ2VyLlxuICAgICAgdyA9IFhbMF0gPSBzZWVkO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTZWVkIHN0YXRlIHVzaW5nIGEgc3RyaW5nLlxuICAgICAgc2VlZCA9ICcnICsgc2VlZDtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBzZWVkLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIFhbaiAmIDddID0gKFhbaiAmIDddIDw8IDE1KSBeXG4gICAgICAgICAgICAoc2VlZC5jaGFyQ29kZUF0KGopICsgWFsoaiArIDEpICYgN10gPDwgMTMpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBFbmZvcmNlIGFuIGFycmF5IGxlbmd0aCBvZiA4LCBub3QgYWxsIHplcm9lcy5cbiAgICB3aGlsZSAoWC5sZW5ndGggPCA4KSBYLnB1c2goMCk7XG4gICAgZm9yIChqID0gMDsgaiA8IDggJiYgWFtqXSA9PT0gMDsgKytqKTtcbiAgICBpZiAoaiA9PSA4KSB3ID0gWFs3XSA9IC0xOyBlbHNlIHcgPSBYW2pdO1xuXG4gICAgbWUueCA9IFg7XG4gICAgbWUuaSA9IDA7XG5cbiAgICAvLyBEaXNjYXJkIGFuIGluaXRpYWwgMjU2IHZhbHVlcy5cbiAgICBmb3IgKGogPSAyNTY7IGogPiAwOyAtLWopIHtcbiAgICAgIG1lLm5leHQoKTtcbiAgICB9XG4gIH1cblxuICBpbml0KG1lLCBzZWVkKTtcbn1cblxuZnVuY3Rpb24gY29weShmLCB0KSB7XG4gIHQueCA9IGYueC5zbGljZSgpO1xuICB0LmkgPSBmLmk7XG4gIHJldHVybiB0O1xufVxuXG5mdW5jdGlvbiBpbXBsKHNlZWQsIG9wdHMpIHtcbiAgaWYgKHNlZWQgPT0gbnVsbCkgc2VlZCA9ICsobmV3IERhdGUpO1xuICB2YXIgeGcgPSBuZXcgWG9yR2VuKHNlZWQpLFxuICAgICAgc3RhdGUgPSBvcHRzICYmIG9wdHMuc3RhdGUsXG4gICAgICBwcm5nID0gZnVuY3Rpb24oKSB7IHJldHVybiAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwOyB9O1xuICBwcm5nLmRvdWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIGRvIHtcbiAgICAgIHZhciB0b3AgPSB4Zy5uZXh0KCkgPj4+IDExLFxuICAgICAgICAgIGJvdCA9ICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDAsXG4gICAgICAgICAgcmVzdWx0ID0gKHRvcCArIGJvdCkgLyAoMSA8PCAyMSk7XG4gICAgfSB3aGlsZSAocmVzdWx0ID09PSAwKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBwcm5nLmludDMyID0geGcubmV4dDtcbiAgcHJuZy5xdWljayA9IHBybmc7XG4gIGlmIChzdGF0ZSkge1xuICAgIGlmIChzdGF0ZS54KSBjb3B5KHN0YXRlLCB4Zyk7XG4gICAgcHJuZy5zdGF0ZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29weSh4Zywge30pOyB9XG4gIH1cbiAgcmV0dXJuIHBybmc7XG59XG5cbmlmIChtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBpbXBsO1xufSBlbHNlIGlmIChkZWZpbmUgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBpbXBsOyB9KTtcbn0gZWxzZSB7XG4gIHRoaXMueG9yc2hpZnQ3ID0gaW1wbDtcbn1cblxufSkoXG4gIHRoaXMsXG4gICh0eXBlb2YgbW9kdWxlKSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUsICAgIC8vIHByZXNlbnQgaW4gbm9kZS5qc1xuICAodHlwZW9mIGRlZmluZSkgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUgICAvLyBwcmVzZW50IHdpdGggYW4gQU1EIGxvYWRlclxuKTtcblxuIiwiLy8gQSBKYXZhc2NyaXB0IGltcGxlbWVudGFpb24gb2YgdGhlIFwieG9yd293XCIgcHJuZyBhbGdvcml0aG0gYnlcbi8vIEdlb3JnZSBNYXJzYWdsaWEuICBTZWUgaHR0cDovL3d3dy5qc3RhdHNvZnQub3JnL3YwOC9pMTQvcGFwZXJcblxuKGZ1bmN0aW9uKGdsb2JhbCwgbW9kdWxlLCBkZWZpbmUpIHtcblxuZnVuY3Rpb24gWG9yR2VuKHNlZWQpIHtcbiAgdmFyIG1lID0gdGhpcywgc3Ryc2VlZCA9ICcnO1xuXG4gIC8vIFNldCB1cCBnZW5lcmF0b3IgZnVuY3Rpb24uXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdCA9IChtZS54IF4gKG1lLnggPj4+IDIpKTtcbiAgICBtZS54ID0gbWUueTsgbWUueSA9IG1lLno7IG1lLnogPSBtZS53OyBtZS53ID0gbWUudjtcbiAgICByZXR1cm4gKG1lLmQgPSAobWUuZCArIDM2MjQzNyB8IDApKSArXG4gICAgICAgKG1lLnYgPSAobWUudiBeIChtZS52IDw8IDQpKSBeICh0IF4gKHQgPDwgMSkpKSB8IDA7XG4gIH07XG5cbiAgbWUueCA9IDA7XG4gIG1lLnkgPSAwO1xuICBtZS56ID0gMDtcbiAgbWUudyA9IDA7XG4gIG1lLnYgPSAwO1xuXG4gIGlmIChzZWVkID09PSAoc2VlZCB8IDApKSB7XG4gICAgLy8gSW50ZWdlciBzZWVkLlxuICAgIG1lLnggPSBzZWVkO1xuICB9IGVsc2Uge1xuICAgIC8vIFN0cmluZyBzZWVkLlxuICAgIHN0cnNlZWQgKz0gc2VlZDtcbiAgfVxuXG4gIC8vIE1peCBpbiBzdHJpbmcgc2VlZCwgdGhlbiBkaXNjYXJkIGFuIGluaXRpYWwgYmF0Y2ggb2YgNjQgdmFsdWVzLlxuICBmb3IgKHZhciBrID0gMDsgayA8IHN0cnNlZWQubGVuZ3RoICsgNjQ7IGsrKykge1xuICAgIG1lLnggXj0gc3Ryc2VlZC5jaGFyQ29kZUF0KGspIHwgMDtcbiAgICBpZiAoayA9PSBzdHJzZWVkLmxlbmd0aCkge1xuICAgICAgbWUuZCA9IG1lLnggPDwgMTAgXiBtZS54ID4+PiA0O1xuICAgIH1cbiAgICBtZS5uZXh0KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29weShmLCB0KSB7XG4gIHQueCA9IGYueDtcbiAgdC55ID0gZi55O1xuICB0LnogPSBmLno7XG4gIHQudyA9IGYudztcbiAgdC52ID0gZi52O1xuICB0LmQgPSBmLmQ7XG4gIHJldHVybiB0O1xufVxuXG5mdW5jdGlvbiBpbXBsKHNlZWQsIG9wdHMpIHtcbiAgdmFyIHhnID0gbmV3IFhvckdlbihzZWVkKSxcbiAgICAgIHN0YXRlID0gb3B0cyAmJiBvcHRzLnN0YXRlLFxuICAgICAgcHJuZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMDsgfTtcbiAgcHJuZy5kb3VibGUgPSBmdW5jdGlvbigpIHtcbiAgICBkbyB7XG4gICAgICB2YXIgdG9wID0geGcubmV4dCgpID4+PiAxMSxcbiAgICAgICAgICBib3QgPSAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwLFxuICAgICAgICAgIHJlc3VsdCA9ICh0b3AgKyBib3QpIC8gKDEgPDwgMjEpO1xuICAgIH0gd2hpbGUgKHJlc3VsdCA9PT0gMCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcHJuZy5pbnQzMiA9IHhnLm5leHQ7XG4gIHBybmcucXVpY2sgPSBwcm5nO1xuICBpZiAoc3RhdGUpIHtcbiAgICBpZiAodHlwZW9mKHN0YXRlKSA9PSAnb2JqZWN0JykgY29weShzdGF0ZSwgeGcpO1xuICAgIHBybmcuc3RhdGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvcHkoeGcsIHt9KTsgfVxuICB9XG4gIHJldHVybiBwcm5nO1xufVxuXG5pZiAobW9kdWxlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gaW1wbDtcbn0gZWxzZSBpZiAoZGVmaW5lICYmIGRlZmluZS5hbWQpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gaW1wbDsgfSk7XG59IGVsc2Uge1xuICB0aGlzLnhvcndvdyA9IGltcGw7XG59XG5cbn0pKFxuICB0aGlzLFxuICAodHlwZW9mIG1vZHVsZSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlLCAgICAvLyBwcmVzZW50IGluIG5vZGUuanNcbiAgKHR5cGVvZiBkZWZpbmUpID09ICdmdW5jdGlvbicgJiYgZGVmaW5lICAgLy8gcHJlc2VudCB3aXRoIGFuIEFNRCBsb2FkZXJcbik7XG5cblxuIiwiLypcbkNvcHlyaWdodCAyMDE5IERhdmlkIEJhdS5cblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nXG5hIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcblwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xud2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvXG5wZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG9cbnRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbmluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxuRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG5NRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuXG5JTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWVxuQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCxcblRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFXG5TT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIHBvb2wsIG1hdGgpIHtcbi8vXG4vLyBUaGUgZm9sbG93aW5nIGNvbnN0YW50cyBhcmUgcmVsYXRlZCB0byBJRUVFIDc1NCBsaW1pdHMuXG4vL1xuXG52YXIgd2lkdGggPSAyNTYsICAgICAgICAvLyBlYWNoIFJDNCBvdXRwdXQgaXMgMCA8PSB4IDwgMjU2XG4gICAgY2h1bmtzID0gNiwgICAgICAgICAvLyBhdCBsZWFzdCBzaXggUkM0IG91dHB1dHMgZm9yIGVhY2ggZG91YmxlXG4gICAgZGlnaXRzID0gNTIsICAgICAgICAvLyB0aGVyZSBhcmUgNTIgc2lnbmlmaWNhbnQgZGlnaXRzIGluIGEgZG91YmxlXG4gICAgcm5nbmFtZSA9ICdyYW5kb20nLCAvLyBybmduYW1lOiBuYW1lIGZvciBNYXRoLnJhbmRvbSBhbmQgTWF0aC5zZWVkcmFuZG9tXG4gICAgc3RhcnRkZW5vbSA9IG1hdGgucG93KHdpZHRoLCBjaHVua3MpLFxuICAgIHNpZ25pZmljYW5jZSA9IG1hdGgucG93KDIsIGRpZ2l0cyksXG4gICAgb3ZlcmZsb3cgPSBzaWduaWZpY2FuY2UgKiAyLFxuICAgIG1hc2sgPSB3aWR0aCAtIDEsXG4gICAgbm9kZWNyeXB0bzsgICAgICAgICAvLyBub2RlLmpzIGNyeXB0byBtb2R1bGUsIGluaXRpYWxpemVkIGF0IHRoZSBib3R0b20uXG5cbi8vXG4vLyBzZWVkcmFuZG9tKClcbi8vIFRoaXMgaXMgdGhlIHNlZWRyYW5kb20gZnVuY3Rpb24gZGVzY3JpYmVkIGFib3ZlLlxuLy9cbmZ1bmN0aW9uIHNlZWRyYW5kb20oc2VlZCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgdmFyIGtleSA9IFtdO1xuICBvcHRpb25zID0gKG9wdGlvbnMgPT0gdHJ1ZSkgPyB7IGVudHJvcHk6IHRydWUgfSA6IChvcHRpb25zIHx8IHt9KTtcblxuICAvLyBGbGF0dGVuIHRoZSBzZWVkIHN0cmluZyBvciBidWlsZCBvbmUgZnJvbSBsb2NhbCBlbnRyb3B5IGlmIG5lZWRlZC5cbiAgdmFyIHNob3J0c2VlZCA9IG1peGtleShmbGF0dGVuKFxuICAgIG9wdGlvbnMuZW50cm9weSA/IFtzZWVkLCB0b3N0cmluZyhwb29sKV0gOlxuICAgIChzZWVkID09IG51bGwpID8gYXV0b3NlZWQoKSA6IHNlZWQsIDMpLCBrZXkpO1xuXG4gIC8vIFVzZSB0aGUgc2VlZCB0byBpbml0aWFsaXplIGFuIEFSQzQgZ2VuZXJhdG9yLlxuICB2YXIgYXJjNCA9IG5ldyBBUkM0KGtleSk7XG5cbiAgLy8gVGhpcyBmdW5jdGlvbiByZXR1cm5zIGEgcmFuZG9tIGRvdWJsZSBpbiBbMCwgMSkgdGhhdCBjb250YWluc1xuICAvLyByYW5kb21uZXNzIGluIGV2ZXJ5IGJpdCBvZiB0aGUgbWFudGlzc2Egb2YgdGhlIElFRUUgNzU0IHZhbHVlLlxuICB2YXIgcHJuZyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBuID0gYXJjNC5nKGNodW5rcyksICAgICAgICAgICAgIC8vIFN0YXJ0IHdpdGggYSBudW1lcmF0b3IgbiA8IDIgXiA0OFxuICAgICAgICBkID0gc3RhcnRkZW5vbSwgICAgICAgICAgICAgICAgIC8vICAgYW5kIGRlbm9taW5hdG9yIGQgPSAyIF4gNDguXG4gICAgICAgIHggPSAwOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBhbmQgbm8gJ2V4dHJhIGxhc3QgYnl0ZScuXG4gICAgd2hpbGUgKG4gPCBzaWduaWZpY2FuY2UpIHsgICAgICAgICAgLy8gRmlsbCB1cCBhbGwgc2lnbmlmaWNhbnQgZGlnaXRzIGJ5XG4gICAgICBuID0gKG4gKyB4KSAqIHdpZHRoOyAgICAgICAgICAgICAgLy8gICBzaGlmdGluZyBudW1lcmF0b3IgYW5kXG4gICAgICBkICo9IHdpZHRoOyAgICAgICAgICAgICAgICAgICAgICAgLy8gICBkZW5vbWluYXRvciBhbmQgZ2VuZXJhdGluZyBhXG4gICAgICB4ID0gYXJjNC5nKDEpOyAgICAgICAgICAgICAgICAgICAgLy8gICBuZXcgbGVhc3Qtc2lnbmlmaWNhbnQtYnl0ZS5cbiAgICB9XG4gICAgd2hpbGUgKG4gPj0gb3ZlcmZsb3cpIHsgICAgICAgICAgICAgLy8gVG8gYXZvaWQgcm91bmRpbmcgdXAsIGJlZm9yZSBhZGRpbmdcbiAgICAgIG4gLz0gMjsgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGxhc3QgYnl0ZSwgc2hpZnQgZXZlcnl0aGluZ1xuICAgICAgZCAvPSAyOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgcmlnaHQgdXNpbmcgaW50ZWdlciBtYXRoIHVudGlsXG4gICAgICB4ID4+Pj0gMTsgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICB3ZSBoYXZlIGV4YWN0bHkgdGhlIGRlc2lyZWQgYml0cy5cbiAgICB9XG4gICAgcmV0dXJuIChuICsgeCkgLyBkOyAgICAgICAgICAgICAgICAgLy8gRm9ybSB0aGUgbnVtYmVyIHdpdGhpbiBbMCwgMSkuXG4gIH07XG5cbiAgcHJuZy5pbnQzMiA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJjNC5nKDQpIHwgMDsgfVxuICBwcm5nLnF1aWNrID0gZnVuY3Rpb24oKSB7IHJldHVybiBhcmM0LmcoNCkgLyAweDEwMDAwMDAwMDsgfVxuICBwcm5nLmRvdWJsZSA9IHBybmc7XG5cbiAgLy8gTWl4IHRoZSByYW5kb21uZXNzIGludG8gYWNjdW11bGF0ZWQgZW50cm9weS5cbiAgbWl4a2V5KHRvc3RyaW5nKGFyYzQuUyksIHBvb2wpO1xuXG4gIC8vIENhbGxpbmcgY29udmVudGlvbjogd2hhdCB0byByZXR1cm4gYXMgYSBmdW5jdGlvbiBvZiBwcm5nLCBzZWVkLCBpc19tYXRoLlxuICByZXR1cm4gKG9wdGlvbnMucGFzcyB8fCBjYWxsYmFjayB8fFxuICAgICAgZnVuY3Rpb24ocHJuZywgc2VlZCwgaXNfbWF0aF9jYWxsLCBzdGF0ZSkge1xuICAgICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgICAvLyBMb2FkIHRoZSBhcmM0IHN0YXRlIGZyb20gdGhlIGdpdmVuIHN0YXRlIGlmIGl0IGhhcyBhbiBTIGFycmF5LlxuICAgICAgICAgIGlmIChzdGF0ZS5TKSB7IGNvcHkoc3RhdGUsIGFyYzQpOyB9XG4gICAgICAgICAgLy8gT25seSBwcm92aWRlIHRoZSAuc3RhdGUgbWV0aG9kIGlmIHJlcXVlc3RlZCB2aWEgb3B0aW9ucy5zdGF0ZS5cbiAgICAgICAgICBwcm5nLnN0YXRlID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb3B5KGFyYzQsIHt9KTsgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgY2FsbGVkIGFzIGEgbWV0aG9kIG9mIE1hdGggKE1hdGguc2VlZHJhbmRvbSgpKSwgbXV0YXRlXG4gICAgICAgIC8vIE1hdGgucmFuZG9tIGJlY2F1c2UgdGhhdCBpcyBob3cgc2VlZHJhbmRvbS5qcyBoYXMgd29ya2VkIHNpbmNlIHYxLjAuXG4gICAgICAgIGlmIChpc19tYXRoX2NhbGwpIHsgbWF0aFtybmduYW1lXSA9IHBybmc7IHJldHVybiBzZWVkOyB9XG5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBpdCBpcyBhIG5ld2VyIGNhbGxpbmcgY29udmVudGlvbiwgc28gcmV0dXJuIHRoZVxuICAgICAgICAvLyBwcm5nIGRpcmVjdGx5LlxuICAgICAgICBlbHNlIHJldHVybiBwcm5nO1xuICAgICAgfSkoXG4gIHBybmcsXG4gIHNob3J0c2VlZCxcbiAgJ2dsb2JhbCcgaW4gb3B0aW9ucyA/IG9wdGlvbnMuZ2xvYmFsIDogKHRoaXMgPT0gbWF0aCksXG4gIG9wdGlvbnMuc3RhdGUpO1xufVxuXG4vL1xuLy8gQVJDNFxuLy9cbi8vIEFuIEFSQzQgaW1wbGVtZW50YXRpb24uICBUaGUgY29uc3RydWN0b3IgdGFrZXMgYSBrZXkgaW4gdGhlIGZvcm0gb2Zcbi8vIGFuIGFycmF5IG9mIGF0IG1vc3QgKHdpZHRoKSBpbnRlZ2VycyB0aGF0IHNob3VsZCBiZSAwIDw9IHggPCAod2lkdGgpLlxuLy9cbi8vIFRoZSBnKGNvdW50KSBtZXRob2QgcmV0dXJucyBhIHBzZXVkb3JhbmRvbSBpbnRlZ2VyIHRoYXQgY29uY2F0ZW5hdGVzXG4vLyB0aGUgbmV4dCAoY291bnQpIG91dHB1dHMgZnJvbSBBUkM0LiAgSXRzIHJldHVybiB2YWx1ZSBpcyBhIG51bWJlciB4XG4vLyB0aGF0IGlzIGluIHRoZSByYW5nZSAwIDw9IHggPCAod2lkdGggXiBjb3VudCkuXG4vL1xuZnVuY3Rpb24gQVJDNChrZXkpIHtcbiAgdmFyIHQsIGtleWxlbiA9IGtleS5sZW5ndGgsXG4gICAgICBtZSA9IHRoaXMsIGkgPSAwLCBqID0gbWUuaSA9IG1lLmogPSAwLCBzID0gbWUuUyA9IFtdO1xuXG4gIC8vIFRoZSBlbXB0eSBrZXkgW10gaXMgdHJlYXRlZCBhcyBbMF0uXG4gIGlmICgha2V5bGVuKSB7IGtleSA9IFtrZXlsZW4rK107IH1cblxuICAvLyBTZXQgdXAgUyB1c2luZyB0aGUgc3RhbmRhcmQga2V5IHNjaGVkdWxpbmcgYWxnb3JpdGhtLlxuICB3aGlsZSAoaSA8IHdpZHRoKSB7XG4gICAgc1tpXSA9IGkrKztcbiAgfVxuICBmb3IgKGkgPSAwOyBpIDwgd2lkdGg7IGkrKykge1xuICAgIHNbaV0gPSBzW2ogPSBtYXNrICYgKGogKyBrZXlbaSAlIGtleWxlbl0gKyAodCA9IHNbaV0pKV07XG4gICAgc1tqXSA9IHQ7XG4gIH1cblxuICAvLyBUaGUgXCJnXCIgbWV0aG9kIHJldHVybnMgdGhlIG5leHQgKGNvdW50KSBvdXRwdXRzIGFzIG9uZSBudW1iZXIuXG4gIChtZS5nID0gZnVuY3Rpb24oY291bnQpIHtcbiAgICAvLyBVc2luZyBpbnN0YW5jZSBtZW1iZXJzIGluc3RlYWQgb2YgY2xvc3VyZSBzdGF0ZSBuZWFybHkgZG91YmxlcyBzcGVlZC5cbiAgICB2YXIgdCwgciA9IDAsXG4gICAgICAgIGkgPSBtZS5pLCBqID0gbWUuaiwgcyA9IG1lLlM7XG4gICAgd2hpbGUgKGNvdW50LS0pIHtcbiAgICAgIHQgPSBzW2kgPSBtYXNrICYgKGkgKyAxKV07XG4gICAgICByID0gciAqIHdpZHRoICsgc1ttYXNrICYgKChzW2ldID0gc1tqID0gbWFzayAmIChqICsgdCldKSArIChzW2pdID0gdCkpXTtcbiAgICB9XG4gICAgbWUuaSA9IGk7IG1lLmogPSBqO1xuICAgIHJldHVybiByO1xuICAgIC8vIEZvciByb2J1c3QgdW5wcmVkaWN0YWJpbGl0eSwgdGhlIGZ1bmN0aW9uIGNhbGwgYmVsb3cgYXV0b21hdGljYWxseVxuICAgIC8vIGRpc2NhcmRzIGFuIGluaXRpYWwgYmF0Y2ggb2YgdmFsdWVzLiAgVGhpcyBpcyBjYWxsZWQgUkM0LWRyb3BbMjU2XS5cbiAgICAvLyBTZWUgaHR0cDovL2dvb2dsZS5jb20vc2VhcmNoP3E9cnNhK2ZsdWhyZXIrcmVzcG9uc2UmYnRuSVxuICB9KSh3aWR0aCk7XG59XG5cbi8vXG4vLyBjb3B5KClcbi8vIENvcGllcyBpbnRlcm5hbCBzdGF0ZSBvZiBBUkM0IHRvIG9yIGZyb20gYSBwbGFpbiBvYmplY3QuXG4vL1xuZnVuY3Rpb24gY29weShmLCB0KSB7XG4gIHQuaSA9IGYuaTtcbiAgdC5qID0gZi5qO1xuICB0LlMgPSBmLlMuc2xpY2UoKTtcbiAgcmV0dXJuIHQ7XG59O1xuXG4vL1xuLy8gZmxhdHRlbigpXG4vLyBDb252ZXJ0cyBhbiBvYmplY3QgdHJlZSB0byBuZXN0ZWQgYXJyYXlzIG9mIHN0cmluZ3MuXG4vL1xuZnVuY3Rpb24gZmxhdHRlbihvYmosIGRlcHRoKSB7XG4gIHZhciByZXN1bHQgPSBbXSwgdHlwID0gKHR5cGVvZiBvYmopLCBwcm9wO1xuICBpZiAoZGVwdGggJiYgdHlwID09ICdvYmplY3QnKSB7XG4gICAgZm9yIChwcm9wIGluIG9iaikge1xuICAgICAgdHJ5IHsgcmVzdWx0LnB1c2goZmxhdHRlbihvYmpbcHJvcF0sIGRlcHRoIC0gMSkpOyB9IGNhdGNoIChlKSB7fVxuICAgIH1cbiAgfVxuICByZXR1cm4gKHJlc3VsdC5sZW5ndGggPyByZXN1bHQgOiB0eXAgPT0gJ3N0cmluZycgPyBvYmogOiBvYmogKyAnXFwwJyk7XG59XG5cbi8vXG4vLyBtaXhrZXkoKVxuLy8gTWl4ZXMgYSBzdHJpbmcgc2VlZCBpbnRvIGEga2V5IHRoYXQgaXMgYW4gYXJyYXkgb2YgaW50ZWdlcnMsIGFuZFxuLy8gcmV0dXJucyBhIHNob3J0ZW5lZCBzdHJpbmcgc2VlZCB0aGF0IGlzIGVxdWl2YWxlbnQgdG8gdGhlIHJlc3VsdCBrZXkuXG4vL1xuZnVuY3Rpb24gbWl4a2V5KHNlZWQsIGtleSkge1xuICB2YXIgc3RyaW5nc2VlZCA9IHNlZWQgKyAnJywgc21lYXIsIGogPSAwO1xuICB3aGlsZSAoaiA8IHN0cmluZ3NlZWQubGVuZ3RoKSB7XG4gICAga2V5W21hc2sgJiBqXSA9XG4gICAgICBtYXNrICYgKChzbWVhciBePSBrZXlbbWFzayAmIGpdICogMTkpICsgc3RyaW5nc2VlZC5jaGFyQ29kZUF0KGorKykpO1xuICB9XG4gIHJldHVybiB0b3N0cmluZyhrZXkpO1xufVxuXG4vL1xuLy8gYXV0b3NlZWQoKVxuLy8gUmV0dXJucyBhbiBvYmplY3QgZm9yIGF1dG9zZWVkaW5nLCB1c2luZyB3aW5kb3cuY3J5cHRvIGFuZCBOb2RlIGNyeXB0b1xuLy8gbW9kdWxlIGlmIGF2YWlsYWJsZS5cbi8vXG5mdW5jdGlvbiBhdXRvc2VlZCgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgb3V0O1xuICAgIGlmIChub2RlY3J5cHRvICYmIChvdXQgPSBub2RlY3J5cHRvLnJhbmRvbUJ5dGVzKSkge1xuICAgICAgLy8gVGhlIHVzZSBvZiAnb3V0JyB0byByZW1lbWJlciByYW5kb21CeXRlcyBtYWtlcyB0aWdodCBtaW5pZmllZCBjb2RlLlxuICAgICAgb3V0ID0gb3V0KHdpZHRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ID0gbmV3IFVpbnQ4QXJyYXkod2lkdGgpO1xuICAgICAgKGdsb2JhbC5jcnlwdG8gfHwgZ2xvYmFsLm1zQ3J5cHRvKS5nZXRSYW5kb21WYWx1ZXMob3V0KTtcbiAgICB9XG4gICAgcmV0dXJuIHRvc3RyaW5nKG91dCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgYnJvd3NlciA9IGdsb2JhbC5uYXZpZ2F0b3IsXG4gICAgICAgIHBsdWdpbnMgPSBicm93c2VyICYmIGJyb3dzZXIucGx1Z2lucztcbiAgICByZXR1cm4gWytuZXcgRGF0ZSwgZ2xvYmFsLCBwbHVnaW5zLCBnbG9iYWwuc2NyZWVuLCB0b3N0cmluZyhwb29sKV07XG4gIH1cbn1cblxuLy9cbi8vIHRvc3RyaW5nKClcbi8vIENvbnZlcnRzIGFuIGFycmF5IG9mIGNoYXJjb2RlcyB0byBhIHN0cmluZ1xuLy9cbmZ1bmN0aW9uIHRvc3RyaW5nKGEpIHtcbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoMCwgYSk7XG59XG5cbi8vXG4vLyBXaGVuIHNlZWRyYW5kb20uanMgaXMgbG9hZGVkLCB3ZSBpbW1lZGlhdGVseSBtaXggYSBmZXcgYml0c1xuLy8gZnJvbSB0aGUgYnVpbHQtaW4gUk5HIGludG8gdGhlIGVudHJvcHkgcG9vbC4gIEJlY2F1c2Ugd2UgZG9cbi8vIG5vdCB3YW50IHRvIGludGVyZmVyZSB3aXRoIGRldGVybWluaXN0aWMgUFJORyBzdGF0ZSBsYXRlcixcbi8vIHNlZWRyYW5kb20gd2lsbCBub3QgY2FsbCBtYXRoLnJhbmRvbSBvbiBpdHMgb3duIGFnYWluIGFmdGVyXG4vLyBpbml0aWFsaXphdGlvbi5cbi8vXG5taXhrZXkobWF0aC5yYW5kb20oKSwgcG9vbCk7XG5cbi8vXG4vLyBOb2RlanMgYW5kIEFNRCBzdXBwb3J0OiBleHBvcnQgdGhlIGltcGxlbWVudGF0aW9uIGFzIGEgbW9kdWxlIHVzaW5nXG4vLyBlaXRoZXIgY29udmVudGlvbi5cbi8vXG5pZiAoKHR5cGVvZiBtb2R1bGUpID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gc2VlZHJhbmRvbTtcbiAgLy8gV2hlbiBpbiBub2RlLmpzLCB0cnkgdXNpbmcgY3J5cHRvIHBhY2thZ2UgZm9yIGF1dG9zZWVkaW5nLlxuICB0cnkge1xuICAgIG5vZGVjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbiAgfSBjYXRjaCAoZXgpIHt9XG59IGVsc2UgaWYgKCh0eXBlb2YgZGVmaW5lKSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gc2VlZHJhbmRvbTsgfSk7XG59IGVsc2Uge1xuICAvLyBXaGVuIGluY2x1ZGVkIGFzIGEgcGxhaW4gc2NyaXB0LCBzZXQgdXAgTWF0aC5zZWVkcmFuZG9tIGdsb2JhbC5cbiAgbWF0aFsnc2VlZCcgKyBybmduYW1lXSA9IHNlZWRyYW5kb207XG59XG5cblxuLy8gRW5kIGFub255bW91cyBzY29wZSwgYW5kIHBhc3MgaW5pdGlhbCB2YWx1ZXMuXG59KShcbiAgLy8gZ2xvYmFsOiBgc2VsZmAgaW4gYnJvd3NlcnMgKGluY2x1ZGluZyBzdHJpY3QgbW9kZSBhbmQgd2ViIHdvcmtlcnMpLFxuICAvLyBvdGhlcndpc2UgYHRoaXNgIGluIE5vZGUgYW5kIG90aGVyIGVudmlyb25tZW50c1xuICAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSA/IHNlbGYgOiB0aGlzLFxuICBbXSwgICAgIC8vIHBvb2w6IGVudHJvcHkgcG9vbCBzdGFydHMgZW1wdHlcbiAgTWF0aCAgICAvLyBtYXRoOiBwYWNrYWdlIGNvbnRhaW5pbmcgcmFuZG9tLCBwb3csIGFuZCBzZWVkcmFuZG9tXG4pO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5hbWREID0gZnVuY3Rpb24gKCkge1xuXHR0aHJvdyBuZXcgRXJyb3IoJ2RlZmluZSBjYW5ub3QgYmUgdXNlZCBpbmRpcmVjdCcpO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmFtZE8gPSB7fTsiLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5tZCA9IChtb2R1bGUpID0+IHtcblx0bW9kdWxlLnBhdGhzID0gW107XG5cdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0cmV0dXJuIG1vZHVsZTtcbn07IiwiaW1wb3J0IHNlZWRyYW5kb20gZnJvbSBcInNlZWRyYW5kb21cIjtcblxuZnVuY3Rpb24gZ2VuZXJhdGVNYXAod2lkdGgsIGhlaWdodCwgc2VlZCkge1xuICBjb25zdCByYW5kb20gPSBzZWVkcmFuZG9tKFxuICAgIHNlZWQgfHwgd2luZG93LmNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQzMkFycmF5KDEpKVswXS50b1N0cmluZygpXG4gICk7XG5cbiAgY29uc3Qgcm9vdFJvb20gPSB7IHg6IDAsIHk6IDAsIHdpZHRoLCBoZWlnaHQgfTtcblxuICAvLyBCaW5hcnkgU3BhY2UgUGFydGl0aW9uaW5nXG4gIGNvbnN0IHJvb21zID0gW107XG4gIGNvbnN0IGxpbmVzID0gW107XG4gIGNvbnN0IHBhcnRpdGlvbiA9IChyb29tKSA9PiB7XG4gICAgaWYgKHJvb20ud2lkdGggPCAyMCB8fCByb29tLmhlaWdodCA8IDIwKSB7XG4gICAgICByb29tcy5wdXNoKHJvb20pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB7IGxlZnRSb29tLCByaWdodFJvb20sIGxpbmUgfSA9IHBhcnRpdGlvblJvb20ocm9vbSwgcmFuZG9tKTtcbiAgICAgIHBhcnRpdGlvbihsZWZ0Um9vbSk7XG4gICAgICBwYXJ0aXRpb24ocmlnaHRSb29tKTtcbiAgICAgIHJvb21zLnB1c2gobGVmdFJvb20sIHJpZ2h0Um9vbSk7XG4gICAgICBsaW5lcy5wdXNoKGxpbmUpO1xuICAgIH1cbiAgfTtcbiAgcGFydGl0aW9uKHJvb3RSb29tKTtcblxuICBjb25zdCBtYXAgPSBBcnJheShoZWlnaHQpXG4gICAgLmZpbGwoKVxuICAgIC5tYXAoKCkgPT4gQXJyYXkod2lkdGgpLmZpbGwoMSkpO1xuXG4gIHJvb21zLmZvckVhY2goKHJvb20pID0+IHtcbiAgICBmb3IgKGxldCB5ID0gcm9vbS55ICsgMTsgeSA8IHJvb20ueSArIHJvb20uaGVpZ2h0IC0gMTsgeSsrKSB7XG4gICAgICBmb3IgKGxldCB4ID0gcm9vbS54ICsgMTsgeCA8IHJvb20ueCArIHJvb20ud2lkdGggLSAxOyB4KyspIHtcbiAgICAgICAgbWFwW3ldW3hdID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBjeCA9IE1hdGguZmxvb3Iocm9vbS54ICsgcm9vbS53aWR0aCAvIDIpO1xuICAgIGNvbnN0IGN5ID0gTWF0aC5mbG9vcihyb29tLnkgKyByb29tLmhlaWdodCAvIDIpO1xuICAgIG1hcFtjeV1bY3hdID0gMjtcbiAgfSk7XG5cbiAgbGluZXMuZm9yRWFjaCgobGluZSkgPT4ge1xuICAgIGNvbnN0IHsgc3RhcnQsIGVuZCB9ID0gbGluZTtcbiAgICBpZiAoc3RhcnQueCA9PT0gZW5kLngpIHtcbiAgICAgIGZvciAobGV0IHkgPSBzdGFydC55OyB5IDwgZW5kLnk7IHkrKykge1xuICAgICAgICBtYXBbeV1bc3RhcnQueF0gPSAxO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCB4ID0gc3RhcnQueDsgeCA8IGVuZC54OyB4KyspIHtcbiAgICAgICAgbWFwW3N0YXJ0LnldW3hdID0gMTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBtYXA7XG59XG5cbmZ1bmN0aW9uIHBhcnRpdGlvblJvb20ocm9vbSwgcmFuZG9tKSB7XG4gIGNvbnN0IGlzVmVydGljYWwgPSByYW5kb20oKSA8IDAuNTtcblxuICBjb25zdCBzcGxpdFBvaW50ID0ge1xuICAgIHg6IE1hdGguZmxvb3Iocm9vbS54ICsgcm9vbS53aWR0aCAqIHJhbmRvbSgpKSxcbiAgICB5OiBNYXRoLmZsb29yKHJvb20ueSArIHJvb20uaGVpZ2h0ICogcmFuZG9tKCkpLFxuICB9O1xuXG4gIGNvbnN0IGxlZnRSb29tID0ge1xuICAgIHg6IHJvb20ueCxcbiAgICB5OiByb29tLnksXG4gICAgd2lkdGg6IGlzVmVydGljYWwgPyBzcGxpdFBvaW50LnggLSByb29tLnggOiByb29tLndpZHRoLFxuICAgIGhlaWdodDogaXNWZXJ0aWNhbCA/IHJvb20uaGVpZ2h0IDogc3BsaXRQb2ludC55IC0gcm9vbS55LFxuICB9O1xuICBjb25zdCByaWdodFJvb20gPSB7XG4gICAgeDogaXNWZXJ0aWNhbCA/IHNwbGl0UG9pbnQueCA6IHJvb20ueCxcbiAgICB5OiBpc1ZlcnRpY2FsID8gcm9vbS55IDogc3BsaXRQb2ludC55LFxuICAgIHdpZHRoOiBpc1ZlcnRpY2FsID8gcm9vbS54ICsgcm9vbS53aWR0aCAtIHNwbGl0UG9pbnQueCA6IHJvb20ud2lkdGgsXG4gICAgaGVpZ2h0OiBpc1ZlcnRpY2FsID8gcm9vbS5oZWlnaHQgOiByb29tLnkgKyByb29tLmhlaWdodCAtIHNwbGl0UG9pbnQueSxcbiAgfTtcbiAgY29uc3QgbGluZSA9IHtcbiAgICBzdGFydDogeyB4OiBzcGxpdFBvaW50LngsIHk6IHNwbGl0UG9pbnQueSB9LFxuICAgIGVuZDoge1xuICAgICAgeDogaXNWZXJ0aWNhbCA/IHNwbGl0UG9pbnQueCA6IHNwbGl0UG9pbnQueCArIDEsXG4gICAgICB5OiBpc1ZlcnRpY2FsID8gc3BsaXRQb2ludC55ICsgMSA6IHNwbGl0UG9pbnQueSxcbiAgICB9LFxuICB9O1xuXG4gIHJldHVybiB7IGxlZnRSb29tLCByaWdodFJvb20sIGxpbmUgfTtcbn1cblxuY29uc3QgbWFwID0gZ2VuZXJhdGVNYXAoNTAsIDUwLCBcInNlZWRcIik7XG5jb25zb2xlLmxvZyhtYXApO1xuXG5jb25zdCBsZXZlbHMgPSBbXG4gIHtcbiAgICBpZDogMCxcbiAgICBuYW1lOiBcIkZpcnN0IGxldmVsXCIsXG4gICAgXCJtYXBcIjogbWFwLFxuICB9LFxuXTtcblxuZXhwb3J0IGRlZmF1bHQgbGV2ZWxzO1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGVyc29uIHtcbiAgICBjb25zdHJ1Y3RvcihpZCkge1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucG9zID0geyB4OiAwLCB5OiAwIH07XG4gICAgICAgIHRoaXMuc3BlZWQgPSAwO1xuICAgICAgICB0aGlzLm1vdmVTcGVlZCA9IDA7XG4gICAgICAgIHRoaXMucm90YXRpb24gPSAwO1xuICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IHsgeDogMCwgeTogMCB9O1xuICAgICAgICB0aGlzLnJvdGF0aW9uU3BlZWQgPSAwO1xuICAgIH1cbn1cbiIsImltcG9ydCBQZXJzb24gZnJvbSBcIi4vcGVyc29uXCI7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQbGF5ZXIgZXh0ZW5kcyBQZXJzb24ge1xuICAgIGNvbnN0cnVjdG9yKGlkKSB7XG4gICAgICAgIHN1cGVyKGlkKTtcbiAgICAgICAgdGhpcy5pc1N0cmFmaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wb3MgPSB7IHg6IDE2LCB5OiAxMCB9O1xuICAgICAgICB0aGlzLnNwZWVkID0gMDtcbiAgICAgICAgdGhpcy5tb3ZlU3BlZWQgPSAwLjAwNTtcbiAgICAgICAgdGhpcy5yb3RhdGlvbiA9IDA7XG4gICAgICAgIHRoaXMuZGlyZWN0aW9uID0geyB4OiAwLCB5OiAwIH07XG4gICAgICAgIHRoaXMucm90YXRpb25TcGVlZCA9ICgxICogTWF0aC5QSSkgLyAzNjA7XG4gICAgfVxufVxuIiwiY2xhc3MgSFVEIHtcbiAgICBjb25zdHJ1Y3Rvcih3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuX2NhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG4gICAgICAgIHRoaXMuX2NhbnZhcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLl9jYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICB0aGlzLl9jYW52YXMuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgIHRoaXMuX2NhbnZhcy5zdHlsZS50b3AgPSBcIjBcIjtcbiAgICAgICAgdGhpcy5fY2FudmFzLnN0eWxlLmxlZnQgPSBcIjBcIjtcbiAgICAgICAgdGhpcy5fY2FudmFzLmlkID0gXCJodWRcIjtcbiAgICAgICAgdGhpcy5fY3R4ID0gdGhpcy5fY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgdGhpcy5yZW5kZXJDcm9zc2hhaXIoKTtcbiAgICB9XG4gICAgZ2V0IGNhbnZhcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhbnZhcztcbiAgICB9XG4gICAgZ2V0IGN0eCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2N0eDtcbiAgICB9XG4gICAgcmVuZGVyQ3Jvc3NoYWlyKCkge1xuICAgICAgICB0aGlzLl9jdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIHRoaXMuX2N0eC5tb3ZlVG8odGhpcy5jYW52YXMud2lkdGggLyAyLCB0aGlzLl9jYW52YXMuaGVpZ2h0IC8gMik7XG4gICAgICAgIHRoaXMuX2N0eC5saW5lVG8odGhpcy5fY2FudmFzLndpZHRoIC8gMiArIDEwLCB0aGlzLl9jYW52YXMuaGVpZ2h0IC8gMik7XG4gICAgICAgIHRoaXMuX2N0eC5tb3ZlVG8odGhpcy5fY2FudmFzLndpZHRoIC8gMiwgdGhpcy5fY2FudmFzLmhlaWdodCAvIDIpO1xuICAgICAgICB0aGlzLl9jdHgubGluZVRvKHRoaXMuX2NhbnZhcy53aWR0aCAvIDIgLSAxMCwgdGhpcy5fY2FudmFzLmhlaWdodCAvIDIpO1xuICAgICAgICB0aGlzLl9jdHgubW92ZVRvKHRoaXMuX2NhbnZhcy53aWR0aCAvIDIsIHRoaXMuX2NhbnZhcy5oZWlnaHQgLyAyKTtcbiAgICAgICAgdGhpcy5fY3R4LmxpbmVUbyh0aGlzLl9jYW52YXMud2lkdGggLyAyLCB0aGlzLl9jYW52YXMuaGVpZ2h0IC8gMiArIDEwKTtcbiAgICAgICAgdGhpcy5fY3R4Lm1vdmVUbyh0aGlzLl9jYW52YXMud2lkdGggLyAyLCB0aGlzLl9jYW52YXMuaGVpZ2h0IC8gMik7XG4gICAgICAgIHRoaXMuX2N0eC5saW5lVG8odGhpcy5fY2FudmFzLndpZHRoIC8gMiwgdGhpcy5fY2FudmFzLmhlaWdodCAvIDIgLSAxMCk7XG4gICAgICAgIHRoaXMuX2N0eC5zdHJva2VTdHlsZSA9IFwicmVkXCI7XG4gICAgICAgIHRoaXMuX2N0eC5zdHJva2UoKTtcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZW5kZXJlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc3RyaXBXaWR0aCA9IDI7XG4gICAgICAgIHRoaXMuc2NyZWVuU3RyaXBzID0gW107XG4gICAgICAgIHRoaXMuc2NyZWVuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdGhpcy53aWR0aCA9IDMyMDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSAyMDA7XG4gICAgICAgIHRoaXMuc2NyZWVuLmlkID0gXCJzY3JlZW5cIjtcbiAgICAgICAgdGhpcy5za3lib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LnByZXBlbmQodGhpcy5zY3JlZW4pO1xuICAgICAgICAvLyBUT0RPOiBlbmFibGUgcmVzaXppbmcgd2hlbiBjYW52YXMgcmVuZGVyZXIgaXMgaW1wbGVtZW50ZWRcbiAgICAgICAgLy93aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLm9uUmVzaXplLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG4gICAgb25SZXNpemUoKSB7XG4gICAgICAgIGNvbnN0IGFzcGVjdFJhdGlvID0gdGhpcy53aWR0aCAvIHRoaXMuaGVpZ2h0O1xuICAgICAgICBjb25zdCBuZXdXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgICBjb25zdCBuZXdIZWlnaHQgPSBuZXdXaWR0aCAvIGFzcGVjdFJhdGlvO1xuICAgICAgICB0aGlzLnNjcmVlbi5zdHlsZS53aWR0aCA9IG5ld1dpZHRoICsgXCJweFwiO1xuICAgICAgICB0aGlzLnNjcmVlbi5zdHlsZS5oZWlnaHQgPSBuZXdIZWlnaHQgKyBcInB4XCI7XG4gICAgfVxuICAgIGluaXQoKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gXCJub25lXCI7XG4gICAgICAgIGNvbnN0IGh1ZCA9IG5ldyBIVUQodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgICAgICBjb25zdCBmbG9vciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGZsb29yLmlkID0gXCJmbG9vclwiO1xuICAgICAgICB0aGlzLnNreWJveC5pZCA9IFwiY2VpbGluZ1wiO1xuICAgICAgICBjb25zdCBsZXZlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGxldmVsLmlkID0gXCJsZXZlbFwiO1xuICAgICAgICBjb25zdCBoYW5kID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgaGFuZC5pZCA9IFwiaGFuZFwiO1xuICAgICAgICB0aGlzLnNjcmVlbi5hcHBlbmRDaGlsZChmbG9vcik7XG4gICAgICAgIHRoaXMuc2NyZWVuLmFwcGVuZENoaWxkKHRoaXMuc2t5Ym94KTtcbiAgICAgICAgdGhpcy5zY3JlZW4uYXBwZW5kQ2hpbGQobGV2ZWwpO1xuICAgICAgICB0aGlzLnNjcmVlbi5hcHBlbmRDaGlsZChoYW5kKTtcbiAgICAgICAgdGhpcy5zY3JlZW4uYXBwZW5kQ2hpbGQoaHVkLmNhbnZhcyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy53aWR0aDsgaSArPSB0aGlzLnN0cmlwV2lkdGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0cmlwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIHN0cmlwLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICAgICAgc3RyaXAuc3R5bGUubGVmdCA9IGkgKyBcInB4XCI7XG4gICAgICAgICAgICBzdHJpcC5zdHlsZS53aWR0aCA9IHRoaXMuc3RyaXBXaWR0aCArIFwicHhcIjtcbiAgICAgICAgICAgIHN0cmlwLnN0eWxlLmhlaWdodCA9IFwiMHB4XCI7XG4gICAgICAgICAgICBzdHJpcC5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG4gICAgICAgICAgICBzdHJpcC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcIm1hZ2VudGFcIjtcbiAgICAgICAgICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICAgICAgaW1nLnNyYyA9IFwicHVibGljL3dhbGxzLnBuZ1wiO1xuICAgICAgICAgICAgaW1nLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICAgICAgaW1nLnN0eWxlLmxlZnQgPSBcIjBweFwiO1xuICAgICAgICAgICAgc3RyaXAuYXBwZW5kQ2hpbGQoaW1nKTtcbiAgICAgICAgICAgIC8vIEFzc2lnbiB0aGUgaW1hZ2UgdG8gYSBwcm9wZXJ0eSBvbiB0aGUgc3RyaXAgZWxlbWVudFxuICAgICAgICAgICAgLy8gc28gd2UgaGF2ZSBlYXN5IGFjY2VzcyB0byB0aGUgaW1hZ2UgbGF0ZXJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIHN0cmlwLmltZyA9IGltZztcbiAgICAgICAgICAgIHRoaXMuc2NyZWVuU3RyaXBzLnB1c2goc3RyaXApO1xuICAgICAgICAgICAgbGV2ZWwuYXBwZW5kQ2hpbGQoc3RyaXApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRyYXdSYXkoKSB7IH1cbiAgICBjYXN0U2luZ2xlUmF5KCkgeyB9XG4gICAgZHJhd01pbmlNYXAoKSB7IH1cbiAgICB1cGRhdGVNaW5pTWFwKCkgeyB9XG59XG4iLCJjbGFzcyBDb250cm9sbGVyIHtcbiAgICBjb25zdHJ1Y3RvcihnYW1lKSB7XG4gICAgICAgIHRoaXMua2V5c1ByZXNzZWQgPSB7fTtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5lbmFibGVQb2ludGVyTG9jaygpO1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG4gICAgaXNLZXlQcmVzc2VkKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5rZXlzUHJlc3NlZFtrZXldO1xuICAgIH1cbiAgICBvbktleWRvd24oZSkge1xuICAgICAgICBzd2l0Y2ggKGUuY29kZSkge1xuICAgICAgICAgICAgY2FzZSBcIktleVdcIjpcbiAgICAgICAgICAgICAgICB0aGlzLmtleXNQcmVzc2VkW2UuY29kZV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIktleVNcIjpcbiAgICAgICAgICAgICAgICB0aGlzLmtleXNQcmVzc2VkW2UuY29kZV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIktleUFcIjpcbiAgICAgICAgICAgICAgICB0aGlzLmtleXNQcmVzc2VkW2UuY29kZV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIktleURcIjpcbiAgICAgICAgICAgICAgICB0aGlzLmtleXNQcmVzc2VkW2UuY29kZV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIlNoaWZ0TGVmdFwiOlxuICAgICAgICAgICAgICAgIHRoaXMua2V5c1ByZXNzZWRbZS5jb2RlXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb25LZXl1cChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICBzd2l0Y2ggKGUuY29kZSkge1xuICAgICAgICAgICAgY2FzZSBcIktleVdcIjpcbiAgICAgICAgICAgICAgICB0aGlzLmtleXNQcmVzc2VkW2UuY29kZV0gPSBmYWxzZTtcbiAgICAgICAgICAgIGNhc2UgXCJLZXlTXCI6XG4gICAgICAgICAgICAgICAgdGhpcy5rZXlzUHJlc3NlZFtlLmNvZGVdID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiS2V5QVwiOlxuICAgICAgICAgICAgICAgIHRoaXMua2V5c1ByZXNzZWRbZS5jb2RlXSA9IGZhbHNlO1xuICAgICAgICAgICAgY2FzZSBcIktleURcIjpcbiAgICAgICAgICAgICAgICB0aGlzLmtleXNQcmVzc2VkW2UuY29kZV0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJTaGlmdExlZnRcIjpcbiAgICAgICAgICAgICAgICB0aGlzLmtleXNQcmVzc2VkW2UuY29kZV0gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbmFibGVQb2ludGVyTG9jaygpIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlcXVlc3RQb2ludGVyTG9jaygpO1xuICAgICAgICB9KTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5vbk1vdXNlTW92ZS5iaW5kKHRoaXMpKTtcbiAgICB9XG4gICAgb25Nb3VzZU1vdmUoZSkge1xuICAgICAgICBjb25zdCByb3RhdGlvbkNoYW5nZSA9IGUubW92ZW1lbnRYICogdGhpcy5nYW1lLnBsYXllci5yb3RhdGlvblNwZWVkO1xuICAgICAgICB0aGlzLmdhbWUucGxheWVyLnJvdGF0aW9uICs9IHJvdGF0aW9uQ2hhbmdlO1xuICAgIH1cbiAgICBpbml0KCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkNvbnRyb2xsZXIgaW5pdGlhbGl6ZWRcIik7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLm9uS2V5ZG93bi5iaW5kKHRoaXMpKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCB0aGlzLm9uS2V5dXAuYmluZCh0aGlzKSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMub25Nb3VzZU1vdmUuYmluZCh0aGlzKSk7XG4gICAgfVxuICAgIHVwZGF0ZShkdCkge1xuICAgICAgICBpZiAodGhpcy5pc0tleVByZXNzZWQoXCJLZXlXXCIpKSB7XG4gICAgICAgICAgICB0aGlzLmdhbWUucGxheWVyLnNwZWVkID0gMTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5wbGF5ZXIuZGlyZWN0aW9uLnkgPSAtMTtcbiAgICAgICAgICAgIC8vaGFuZC5zdHlsZS5hbmltYXRpb24gPSBcIndhbGsgMS41cyBpbmZpbml0ZVwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzS2V5UHJlc3NlZChcIktleVNcIikpIHtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5wbGF5ZXIuc3BlZWQgPSAtMTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5wbGF5ZXIuZGlyZWN0aW9uLnkgPSAxO1xuICAgICAgICAgICAgLy9oYW5kLnN0eWxlLmFuaW1hdGlvbiA9IFwid2FsayAxLjVzIGluZmluaXRlXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNLZXlQcmVzc2VkKFwiS2V5QVwiKSkge1xuICAgICAgICAgICAgdGhpcy5nYW1lLnBsYXllci5kaXJlY3Rpb24ueCA9IDE7XG4gICAgICAgICAgICB0aGlzLmdhbWUucGxheWVyLnNwZWVkID0gLTE7XG4gICAgICAgICAgICAvL2hhbmQuc3R5bGUuYW5pbWF0aW9uID0gXCJ3YWxrIDEuNXMgaW5maW5pdGVcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc0tleVByZXNzZWQoXCJLZXlEXCIpKSB7XG4gICAgICAgICAgICB0aGlzLmdhbWUucGxheWVyLmRpcmVjdGlvbi54ID0gLTE7XG4gICAgICAgICAgICB0aGlzLmdhbWUucGxheWVyLnNwZWVkID0gMTtcbiAgICAgICAgICAgIC8vaGFuZC5zdHlsZS5hbmltYXRpb24gPSBcIndhbGsgMS41cyBpbmZpbml0ZVwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzS2V5UHJlc3NlZChcIlNoaWZ0TGVmdFwiKSkge1xuICAgICAgICAgICAgdGhpcy5nYW1lLnBsYXllci5zcGVlZCAqPSAyO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzS2V5UHJlc3NlZChcIlNwYWNlXCIpKSB7XG4gICAgICAgICAgICB0aGlzLmdhbWUucGxheWVyLnNwZWVkID0gMDtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5wbGF5ZXIuZGlyZWN0aW9uLnkgPSAwO1xuICAgICAgICAgICAgdGhpcy5nYW1lLnBsYXllci5kaXJlY3Rpb24ueCA9IDA7XG4gICAgICAgICAgICAvL2hhbmQuc3R5bGUuYW5pbWF0aW9uID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiBrZXkgbm90IHByZXNzZWQsIHN0b3AgbW92aW5nXG4gICAgICAgIGlmICghdGhpcy5pc0tleVByZXNzZWQoXCJLZXlXXCIpICYmICF0aGlzLmlzS2V5UHJlc3NlZChcIktleVNcIikpIHtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5wbGF5ZXIuZGlyZWN0aW9uLnkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5pc0tleVByZXNzZWQoXCJLZXlBXCIpICYmICF0aGlzLmlzS2V5UHJlc3NlZChcIktleURcIikpIHtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5wbGF5ZXIuZGlyZWN0aW9uLnggPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5pc0tleVByZXNzZWQoXCJTaGlmdExlZnRcIikpIHtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5wbGF5ZXIuc3BlZWQgLz0gMjtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xsZXI7XG4iLCIvL0B0cy1pZ25vcmVcbmltcG9ydCBsZXZlbHMgZnJvbSBcIi4vbGV2ZWxzLmpzXCI7XG5pbXBvcnQgUGxheWVyIGZyb20gXCIuL3BsYXllclwiO1xuaW1wb3J0IFJlbmRlcmVyIGZyb20gXCIuL3JlbmRlcmVyXCI7XG5pbXBvcnQgQ29udHJvbGxlciBmcm9tIFwiLi9jb250cm9sbGVyXCI7XG52YXIgR2FtZVN0YXRlO1xuKGZ1bmN0aW9uIChHYW1lU3RhdGUpIHtcbiAgICBHYW1lU3RhdGVbR2FtZVN0YXRlW1wiUGxheWluZ1wiXSA9IDBdID0gXCJQbGF5aW5nXCI7XG4gICAgR2FtZVN0YXRlW0dhbWVTdGF0ZVtcIkdhbWVPdmVyXCJdID0gMV0gPSBcIkdhbWVPdmVyXCI7XG4gICAgR2FtZVN0YXRlW0dhbWVTdGF0ZVtcIlBhdXNlZFwiXSA9IDJdID0gXCJQYXVzZWRcIjtcbiAgICBHYW1lU3RhdGVbR2FtZVN0YXRlW1wiSW52ZW50b3J5XCJdID0gM10gPSBcIkludmVudG9yeVwiO1xuICAgIEdhbWVTdGF0ZVtHYW1lU3RhdGVbXCJUcmFkaW5nXCJdID0gNF0gPSBcIlRyYWRpbmdcIjtcbiAgICBHYW1lU3RhdGVbR2FtZVN0YXRlW1wiTWFpbk1lbnVcIl0gPSA1XSA9IFwiTWFpbk1lbnVcIjtcbn0pKEdhbWVTdGF0ZSB8fCAoR2FtZVN0YXRlID0ge30pKTtcbmNvbnN0IG1pbmlNYXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI21pbmlNYXBcIik7XG5jb25zdCBtaW5pTWFwT2JqZWN0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbWluaU1hcE9iamVjdHNcIik7XG5sZXQgbWluaU1hcFNjYWxlID0gODtcbmxldCBsYXN0VGltZSA9IDA7XG5jb25zdCBzY3JlZW5XaWR0aCA9IDMyMDtcbmNvbnN0IHNjcmVlbkhlaWdodCA9IDIwMDtcbmNvbnN0IHN0cmlwV2lkdGggPSAyO1xuY29uc3QgZm92ID0gKDYwICogTWF0aC5QSSkgLyAxODA7XG5jb25zdCBmb3ZIYWxmID0gZm92IC8gMjtcbmNvbnN0IG51bVJheXMgPSBNYXRoLmNlaWwoc2NyZWVuV2lkdGggLyBzdHJpcFdpZHRoKTtcbmNvbnN0IHZpZXdEaXN0ID0gc2NyZWVuV2lkdGggLyAyIC8gTWF0aC50YW4oZm92SGFsZik7XG5jb25zdCB0d29QSSA9IE1hdGguUEkgKiAyO1xuY29uc3QgbnVtVGV4dHVyZXMgPSA0O1xubGV0IHZpc2libGVTcHJpdGVzID0gW107XG5sZXQgdGlja0NvdW50ID0gMDtcbmxldCBzcHJpdGVNYXAgPSBbXTtcbmxldCBtYXBJdGVtcyA9IFtdO1xubGV0IGl0ZW1UeXBlcyA9IFtdO1xubGV0IGVuZW15VHlwZXMgPSBbXTtcbmNvbnN0IGRlYnVnU2NyZWVuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNkZWJ1Z1NjcmVlblwiKTtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnN0YXRlID0gXCJtYWlubWVudVwiO1xuICAgICAgICB0aGlzLm1hcFdpZHRoID0gMDtcbiAgICAgICAgdGhpcy5tYXBIZWlnaHQgPSAwO1xuICAgICAgICB0aGlzLmRheVRpbWUgPSAwOyAvLyAwIC0gMjNcbiAgICAgICAgdGhpcy5kcmF3TWluaU1hcCA9ICgpID0+IHtcbiAgICAgICAgICAgIG1pbmlNYXAud2lkdGggPSB0aGlzLm1hcFdpZHRoICogbWluaU1hcFNjYWxlO1xuICAgICAgICAgICAgbWluaU1hcC5oZWlnaHQgPSB0aGlzLm1hcEhlaWdodCAqIG1pbmlNYXBTY2FsZTtcbiAgICAgICAgICAgIG1pbmlNYXAuc3R5bGUud2lkdGggPSBgJHt0aGlzLm1hcFdpZHRoICogbWluaU1hcFNjYWxlfXB4YDtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IG1pbmlNYXAuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLm1hcEhlaWdodDsgeSsrKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB0aGlzLm1hcFdpZHRoOyB4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubGV2ZWwubWFwW3ldW3hdID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5maWxsUmVjdCh4ICogbWluaU1hcFNjYWxlLCB5ICogbWluaU1hcFNjYWxlLCBtaW5pTWFwU2NhbGUsIG1pbmlNYXBTY2FsZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudXBkYXRlTWluaU1hcCA9ICgpID0+IHtcbiAgICAgICAgICAgIG1pbmlNYXBPYmplY3RzLndpZHRoID0gdGhpcy5tYXBXaWR0aCAqIG1pbmlNYXBTY2FsZTtcbiAgICAgICAgICAgIG1pbmlNYXBPYmplY3RzLmhlaWdodCA9IHRoaXMubWFwSGVpZ2h0ICogbWluaU1hcFNjYWxlO1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gbWluaU1hcE9iamVjdHMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBtaW5pTWFwLndpZHRoLCBtaW5pTWFwLmhlaWdodCk7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gXCJ5ZWxsb3dncmVlblwiO1xuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KHRoaXMucGxheWVyLnBvcy54ICogbWluaU1hcFNjYWxlIC0gMiwgdGhpcy5wbGF5ZXIucG9zLnkgKiBtaW5pTWFwU2NhbGUgLSAyLCA0LCA0KTtcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8odGhpcy5wbGF5ZXIucG9zLnggKiBtaW5pTWFwU2NhbGUsIHRoaXMucGxheWVyLnBvcy55ICogbWluaU1hcFNjYWxlKTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oKHRoaXMucGxheWVyLnBvcy54ICsgTWF0aC5jb3ModGhpcy5wbGF5ZXIucm90YXRpb24pICogNCkgKiBtaW5pTWFwU2NhbGUsICh0aGlzLnBsYXllci5wb3MueSArIE1hdGguc2luKHRoaXMucGxheWVyLnJvdGF0aW9uKSAqIDQpICogbWluaU1hcFNjYWxlKTtcbiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wbGF5ZXIgPSBuZXcgUGxheWVyKFwicGxheWVyXCIpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKCk7XG4gICAgICAgIHRoaXMuY29udHJvbGxlciA9IG5ldyBDb250cm9sbGVyKHRoaXMpO1xuICAgICAgICB0aGlzLnN0YXRlID0gXCJtYWlubWVudVwiO1xuICAgICAgICB0aGlzLmxldmVsID0gbGV2ZWxzWzBdO1xuICAgICAgICB0aGlzLnNldHVwKCk7XG4gICAgfVxuICAgIGluaXRTcHJpdGVzKCkge1xuICAgICAgICBzcHJpdGVNYXAgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCB0aGlzLmxldmVsLm1hcC5sZW5ndGg7IHkrKykge1xuICAgICAgICAgICAgc3ByaXRlTWFwW3ldID0gW107XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXBJdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHNwcml0ZSA9IG1hcEl0ZW1zW2ldO1xuICAgICAgICAgICAgdmFyIGl0ZW1UeXBlID0gaXRlbVR5cGVzW3Nwcml0ZS50eXBlXTtcbiAgICAgICAgICAgIHZhciBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgICAgICAgICAgaW1nLnNyYyA9IGl0ZW1UeXBlLmltZztcbiAgICAgICAgICAgIGltZy5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICBpbWcuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgICAgICBzcHJpdGUudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgc3ByaXRlLmJsb2NrID0gaXRlbVR5cGUuYmxvY2s7XG4gICAgICAgICAgICBzcHJpdGUuaW1nID0gaW1nO1xuICAgICAgICAgICAgc3ByaXRlTWFwW3Nwcml0ZS55XVtzcHJpdGUueF0gPSBzcHJpdGU7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnNjcmVlbi5hcHBlbmRDaGlsZChpbWcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlzQmxvY2tpbmcoeCwgeSkge1xuICAgICAgICBpZiAoeSA8IDAgfHwgeSA+PSB0aGlzLm1hcEhlaWdodCB8fCB4IDwgMCB8fCB4ID49IHRoaXMubWFwV2lkdGgpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgdmFyIGl4ID0gTWF0aC5mbG9vcih4KTtcbiAgICAgICAgdmFyIGl5ID0gTWF0aC5mbG9vcih5KTtcbiAgICAgICAgLy8gcmV0dXJuIHRydWUgaWYgdGhlIG1hcCBibG9jayBpcyBub3QgMCwgaWUuIGlmIHRoZXJlIGlzIGEgYmxvY2tpbmcgd2FsbC5cbiAgICAgICAgaWYgKHRoaXMubGV2ZWwubWFwW2l5XVtpeF0gIT0gMClcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAoc3ByaXRlTWFwW2l5XVtpeF0gJiYgc3ByaXRlTWFwW2l5XVtpeF0uYmxvY2spXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjaGVja0NvbGxpc2lvbihmcm9tWCwgZnJvbVksIHRvWCwgdG9ZLCByYWRpdXMpIHtcbiAgICAgICAgdmFyIHBvcyA9IHtcbiAgICAgICAgICAgIHg6IGZyb21YLFxuICAgICAgICAgICAgeTogZnJvbVksXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0b1kgPCAwIHx8IHRvWSA+PSB0aGlzLm1hcEhlaWdodCB8fCB0b1ggPCAwIHx8IHRvWCA+PSB0aGlzLm1hcFdpZHRoKVxuICAgICAgICAgICAgcmV0dXJuIHBvcztcbiAgICAgICAgdmFyIGJsb2NrWCA9IE1hdGguZmxvb3IodG9YKTtcbiAgICAgICAgdmFyIGJsb2NrWSA9IE1hdGguZmxvb3IodG9ZKTtcbiAgICAgICAgaWYgKHRoaXMuaXNCbG9ja2luZyhibG9ja1gsIGJsb2NrWSkpIHtcbiAgICAgICAgICAgIHJldHVybiBwb3M7XG4gICAgICAgIH1cbiAgICAgICAgcG9zLnggPSB0b1g7XG4gICAgICAgIHBvcy55ID0gdG9ZO1xuICAgICAgICB2YXIgYmxvY2tUb3AgPSB0aGlzLmlzQmxvY2tpbmcoYmxvY2tYLCBibG9ja1kgLSAxKTtcbiAgICAgICAgdmFyIGJsb2NrQm90dG9tID0gdGhpcy5pc0Jsb2NraW5nKGJsb2NrWCwgYmxvY2tZICsgMSk7XG4gICAgICAgIHZhciBibG9ja0xlZnQgPSB0aGlzLmlzQmxvY2tpbmcoYmxvY2tYIC0gMSwgYmxvY2tZKTtcbiAgICAgICAgdmFyIGJsb2NrUmlnaHQgPSB0aGlzLmlzQmxvY2tpbmcoYmxvY2tYICsgMSwgYmxvY2tZKTtcbiAgICAgICAgaWYgKGJsb2NrVG9wICYmIHRvWSAtIGJsb2NrWSA8IHJhZGl1cykge1xuICAgICAgICAgICAgdG9ZID0gcG9zLnkgPSBibG9ja1kgKyByYWRpdXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJsb2NrQm90dG9tICYmIGJsb2NrWSArIDEgLSB0b1kgPCByYWRpdXMpIHtcbiAgICAgICAgICAgIHRvWSA9IHBvcy55ID0gYmxvY2tZICsgMSAtIHJhZGl1cztcbiAgICAgICAgfVxuICAgICAgICBpZiAoYmxvY2tMZWZ0ICYmIHRvWCAtIGJsb2NrWCA8IHJhZGl1cykge1xuICAgICAgICAgICAgdG9YID0gcG9zLnggPSBibG9ja1ggKyByYWRpdXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJsb2NrUmlnaHQgJiYgYmxvY2tYICsgMSAtIHRvWCA8IHJhZGl1cykge1xuICAgICAgICAgICAgdG9YID0gcG9zLnggPSBibG9ja1ggKyAxIC0gcmFkaXVzO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlzIHRpbGUgdG8gdGhlIHRvcC1sZWZ0IGEgd2FsbFxuICAgICAgICBpZiAodGhpcy5pc0Jsb2NraW5nKGJsb2NrWCAtIDEsIGJsb2NrWSAtIDEpICYmICEoYmxvY2tUb3AgJiYgYmxvY2tMZWZ0KSkge1xuICAgICAgICAgICAgdmFyIGR4ID0gdG9YIC0gYmxvY2tYO1xuICAgICAgICAgICAgdmFyIGR5ID0gdG9ZIC0gYmxvY2tZO1xuICAgICAgICAgICAgaWYgKGR4ICogZHggKyBkeSAqIGR5IDwgcmFkaXVzICogcmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGR4ICogZHggPiBkeSAqIGR5KVxuICAgICAgICAgICAgICAgICAgICB0b1ggPSBwb3MueCA9IGJsb2NrWCArIHJhZGl1cztcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHRvWSA9IHBvcy55ID0gYmxvY2tZICsgcmFkaXVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGlzIHRpbGUgdG8gdGhlIHRvcC1yaWdodCBhIHdhbGxcbiAgICAgICAgaWYgKHRoaXMuaXNCbG9ja2luZyhibG9ja1ggKyAxLCBibG9ja1kgLSAxKSAmJiAhKGJsb2NrVG9wICYmIGJsb2NrUmlnaHQpKSB7XG4gICAgICAgICAgICB2YXIgZHggPSB0b1ggLSAoYmxvY2tYICsgMSk7XG4gICAgICAgICAgICB2YXIgZHkgPSB0b1kgLSBibG9ja1k7XG4gICAgICAgICAgICBpZiAoZHggKiBkeCArIGR5ICogZHkgPCByYWRpdXMgKiByYWRpdXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZHggKiBkeCA+IGR5ICogZHkpXG4gICAgICAgICAgICAgICAgICAgIHRvWCA9IHBvcy54ID0gYmxvY2tYICsgMSAtIHJhZGl1cztcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHRvWSA9IHBvcy55ID0gYmxvY2tZICsgcmFkaXVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGlzIHRpbGUgdG8gdGhlIGJvdHRvbS1sZWZ0IGEgd2FsbFxuICAgICAgICBpZiAodGhpcy5pc0Jsb2NraW5nKGJsb2NrWCAtIDEsIGJsb2NrWSArIDEpICYmXG4gICAgICAgICAgICAhKGJsb2NrQm90dG9tICYmIGJsb2NrQm90dG9tKSkge1xuICAgICAgICAgICAgdmFyIGR4ID0gdG9YIC0gYmxvY2tYO1xuICAgICAgICAgICAgdmFyIGR5ID0gdG9ZIC0gKGJsb2NrWSArIDEpO1xuICAgICAgICAgICAgaWYgKGR4ICogZHggKyBkeSAqIGR5IDwgcmFkaXVzICogcmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGR4ICogZHggPiBkeSAqIGR5KVxuICAgICAgICAgICAgICAgICAgICB0b1ggPSBwb3MueCA9IGJsb2NrWCArIHJhZGl1cztcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHRvWSA9IHBvcy55ID0gYmxvY2tZICsgMSAtIHJhZGl1cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBpcyB0aWxlIHRvIHRoZSBib3R0b20tcmlnaHQgYSB3YWxsXG4gICAgICAgIGlmICh0aGlzLmlzQmxvY2tpbmcoYmxvY2tYICsgMSwgYmxvY2tZICsgMSkgJiZcbiAgICAgICAgICAgICEoYmxvY2tCb3R0b20gJiYgYmxvY2tSaWdodCkpIHtcbiAgICAgICAgICAgIHZhciBkeCA9IHRvWCAtIChibG9ja1ggKyAxKTtcbiAgICAgICAgICAgIHZhciBkeSA9IHRvWSAtIChibG9ja1kgKyAxKTtcbiAgICAgICAgICAgIGlmIChkeCAqIGR4ICsgZHkgKiBkeSA8IHJhZGl1cyAqIHJhZGl1cykge1xuICAgICAgICAgICAgICAgIGlmIChkeCAqIGR4ID4gZHkgKiBkeSlcbiAgICAgICAgICAgICAgICAgICAgdG9YID0gcG9zLnggPSBibG9ja1ggKyAxIC0gcmFkaXVzO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdG9ZID0gcG9zLnkgPSBibG9ja1kgKyAxIC0gcmFkaXVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwb3M7XG4gICAgfVxuICAgIGNhc3RSYXlzKCkge1xuICAgICAgICBsZXQgc3RyaXBJZHggPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVJheXM7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgcmF5U2NyZWVuUG9zID0gKC1udW1SYXlzIC8gMiArIGkpICogc3RyaXBXaWR0aDtcbiAgICAgICAgICAgIGNvbnN0IHJheVZpZXdEaXN0ID0gTWF0aC5zcXJ0KHJheVNjcmVlblBvcyAqIHJheVNjcmVlblBvcyArIHZpZXdEaXN0ICogdmlld0Rpc3QpO1xuICAgICAgICAgICAgY29uc3QgcmF5QW5nbGUgPSBNYXRoLmFzaW4ocmF5U2NyZWVuUG9zIC8gcmF5Vmlld0Rpc3QpO1xuICAgICAgICAgICAgdGhpcy5jYXN0U2luZ2xlUmF5KHRoaXMucGxheWVyLnJvdGF0aW9uICsgcmF5QW5nbGUsIHN0cmlwSWR4KyspO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhc3RTaW5nbGVSYXkocmF5QW5nbGUsIHN0cmlwSWR4KSB7XG4gICAgICAgIC8vIGh0dHBzOi8vZGV2Lm9wZXJhLmNvbS9hcnRpY2xlcy8zZC1nYW1lcy13aXRoLWNhbnZhcy1hbmQtcmF5Y2FzdGluZy1wYXJ0LTIvXG4gICAgICAgIC8vIGZpcnN0IG1ha2Ugc3VyZSB0aGUgYW5nbGUgaXMgYmV0d2VlbiAwIGFuZCAzNjAgZGVncmVlc1xuICAgICAgICByYXlBbmdsZSAlPSB0d29QSTtcbiAgICAgICAgaWYgKHJheUFuZ2xlIDwgMCkge1xuICAgICAgICAgICAgcmF5QW5nbGUgKz0gdHdvUEk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbW92aW5nIHJpZ2h0L2xlZnQ/IHVwL2Rvd24/IERldGVybWluZWQgYnkgd2hpY2ggcXVhZHJhbnQgdGhlIGFuZ2xlIGlzIGluLlxuICAgICAgICB2YXIgcmlnaHQgPSByYXlBbmdsZSA+IHR3b1BJICogMC43NSB8fCByYXlBbmdsZSA8IHR3b1BJICogMC4yNTtcbiAgICAgICAgdmFyIHVwID0gcmF5QW5nbGUgPCAwIHx8IHJheUFuZ2xlID4gTWF0aC5QSTtcbiAgICAgICAgdmFyIHdhbGxUeXBlID0gMDtcbiAgICAgICAgLy8gb25seSBkbyB0aGVzZSBvbmNlXG4gICAgICAgIHZhciBhbmdsZVNpbiA9IE1hdGguc2luKHJheUFuZ2xlKTtcbiAgICAgICAgdmFyIGFuZ2xlQ29zID0gTWF0aC5jb3MocmF5QW5nbGUpO1xuICAgICAgICB2YXIgZGlzdCA9IDA7IC8vIHRoZSBkaXN0YW5jZSB0byB0aGUgYmxvY2sgd2UgaGl0XG4gICAgICAgIHZhciB4SGl0ID0gMDsgLy8gdGhlIHggYW5kIHkgY29vcmQgb2Ygd2hlcmUgdGhlIHJheSBoaXQgdGhlIGJsb2NrXG4gICAgICAgIHZhciB5SGl0ID0gMDtcbiAgICAgICAgbGV0IHhXYWxsSGl0ID0gMDtcbiAgICAgICAgbGV0IHlXYWxsSGl0ID0gMDtcbiAgICAgICAgdmFyIHRleHR1cmVYID0gMDsgLy8gdGhlIHgtY29vcmQgb24gdGhlIHRleHR1cmUgb2YgdGhlIGJsb2NrLCBpZS4gd2hhdCBwYXJ0IG9mIHRoZSB0ZXh0dXJlIGFyZSB3ZSBnb2luZyB0byByZW5kZXJcbiAgICAgICAgdmFyIHdhbGxYOyAvLyB0aGUgKHgseSkgbWFwIGNvb3JkcyBvZiB0aGUgYmxvY2tcbiAgICAgICAgdmFyIHdhbGxZO1xuICAgICAgICBsZXQgd2FsbElzU2hhZGVkID0gZmFsc2U7XG4gICAgICAgIHZhciB3YWxsSXNIb3Jpem9udGFsID0gZmFsc2U7XG4gICAgICAgIC8vIGZpcnN0IGNoZWNrIGFnYWluc3QgdGhlIHZlcnRpY2FsIG1hcC93YWxsIGxpbmVzXG4gICAgICAgIC8vIHdlIGRvIHRoaXMgYnkgbW92aW5nIHRvIHRoZSByaWdodCBvciBsZWZ0IGVkZ2Ugb2YgdGhlIGJsb2NrIHdlJ3JlIHN0YW5kaW5nIGluXG4gICAgICAgIC8vIGFuZCB0aGVuIG1vdmluZyBpbiAxIG1hcCB1bml0IHN0ZXBzIGhvcml6b250YWxseS4gVGhlIGFtb3VudCB3ZSBoYXZlIHRvIG1vdmUgdmVydGljYWxseVxuICAgICAgICAvLyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBzbG9wZSBvZiB0aGUgcmF5LCB3aGljaCBpcyBzaW1wbHkgZGVmaW5lZCBhcyBzaW4oYW5nbGUpIC8gY29zKGFuZ2xlKS5cbiAgICAgICAgdmFyIHNsb3BlID0gYW5nbGVTaW4gLyBhbmdsZUNvczsgLy8gdGhlIHNsb3BlIG9mIHRoZSBzdHJhaWdodCBsaW5lIG1hZGUgYnkgdGhlIHJheVxuICAgICAgICB2YXIgZFhWZXIgPSByaWdodCA/IDEgOiAtMTsgLy8gd2UgbW92ZSBlaXRoZXIgMSBtYXAgdW5pdCB0byB0aGUgbGVmdCBvciByaWdodFxuICAgICAgICB2YXIgZFlWZXIgPSBkWFZlciAqIHNsb3BlOyAvLyBob3cgbXVjaCB0byBtb3ZlIHVwIG9yIGRvd25cbiAgICAgICAgdmFyIHggPSByaWdodFxuICAgICAgICAgICAgPyBNYXRoLmNlaWwodGhpcy5wbGF5ZXIucG9zLngpXG4gICAgICAgICAgICA6IE1hdGguZmxvb3IodGhpcy5wbGF5ZXIucG9zLngpOyAvLyBzdGFydGluZyBob3Jpem9udGFsIHBvc2l0aW9uLCBhdCBvbmUgb2YgdGhlIGVkZ2VzIG9mIHRoZSBjdXJyZW50IG1hcCBibG9ja1xuICAgICAgICB2YXIgeSA9IHRoaXMucGxheWVyLnBvcy55ICsgKHggLSB0aGlzLnBsYXllci5wb3MueCkgKiBzbG9wZTsgLy8gc3RhcnRpbmcgdmVydGljYWwgcG9zaXRpb24uIFdlIGFkZCB0aGUgc21hbGwgaG9yaXpvbnRhbCBzdGVwIHdlIGp1c3QgbWFkZSwgbXVsdGlwbGllZCBieSB0aGUgc2xvcGUuXG4gICAgICAgIHdoaWxlICh4ID49IDAgJiYgeCA8IHRoaXMubWFwV2lkdGggJiYgeSA+PSAwICYmIHkgPCB0aGlzLm1hcEhlaWdodCkge1xuICAgICAgICAgICAgdmFyIHdhbGxYID0geCArIChyaWdodCA/IDAgOiAtMSk7XG4gICAgICAgICAgICB2YXIgd2FsbFkgPSB5ID4+IDA7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChzcHJpdGVNYXBbd2FsbFldW3dhbGxYXSAmJiAhc3ByaXRlTWFwW3dhbGxZXVt3YWxsWF0udmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICBzcHJpdGVNYXBbd2FsbFldW3dhbGxYXS52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZVNwcml0ZXMucHVzaChzcHJpdGVNYXBbd2FsbFldW3dhbGxYXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgICAgICAgICAgLy8gaXMgdGhpcyBwb2ludCBpbnNpZGUgYSB3YWxsIGJsb2NrP1xuICAgICAgICAgICAgaWYgKHRoaXMubGV2ZWwubWFwW3dhbGxZXVt3YWxsWF0gPiAwKSB7XG4gICAgICAgICAgICAgICAgbGV0IGRpc3RYID0geCAtIHRoaXMucGxheWVyLnBvcy54O1xuICAgICAgICAgICAgICAgIGxldCBkaXN0WSA9IHkgLSB0aGlzLnBsYXllci5wb3MueTtcbiAgICAgICAgICAgICAgICBkaXN0ID0gZGlzdFggKiBkaXN0WCArIGRpc3RZICogZGlzdFk7IC8vIHRoZSBkaXN0YW5jZSBmcm9tIHRoZSBwbGF5ZXIgdG8gdGhpcyBwb2ludCwgc3F1YXJlZC5cbiAgICAgICAgICAgICAgICB3YWxsVHlwZSA9IHRoaXMubGV2ZWwubWFwW3dhbGxZXVt3YWxsWF07IC8vIHdlJ2xsIHJlbWVtYmVyIHRoZSB0eXBlIG9mIHdhbGwgd2UgaGl0IGZvciBsYXRlclxuICAgICAgICAgICAgICAgIHRleHR1cmVYID0geSAlIDE7IC8vIHdoZXJlIGV4YWN0bHkgYXJlIHdlIG9uIHRoZSB3YWxsPyB0ZXh0dXJlWCBpcyB0aGUgeCBjb29yZGluYXRlIG9uIHRoZSB0ZXh0dXJlIHRoYXQgd2UnbGwgdXNlIGxhdGVyIHdoZW4gdGV4dHVyaW5nIHRoZSB3YWxsLlxuICAgICAgICAgICAgICAgIGlmICghcmlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZVggPSAxIC0gdGV4dHVyZVg7XG4gICAgICAgICAgICAgICAgfSAvLyBpZiB3ZSdyZSBsb29raW5nIHRvIHRoZSBsZWZ0IHNpZGUgb2YgdGhlIG1hcCwgdGhlIHRleHR1cmUgc2hvdWxkIGJlIHJldmVyc2VkXG4gICAgICAgICAgICAgICAgeEhpdCA9IHg7IC8vIHNhdmUgdGhlIGNvb3JkaW5hdGVzIG9mIHRoZSBoaXQuIFdlIG9ubHkgcmVhbGx5IHVzZSB0aGVzZSB0byBkcmF3IHRoZSByYXlzIG9uIG1pbmltYXAuXG4gICAgICAgICAgICAgICAgeUhpdCA9IHk7XG4gICAgICAgICAgICAgICAgeFdhbGxIaXQgPSB3YWxsWDtcbiAgICAgICAgICAgICAgICB5V2FsbEhpdCA9IHdhbGxZO1xuICAgICAgICAgICAgICAgIHdhbGxJc0hvcml6b250YWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeCArPSBkWFZlcjtcbiAgICAgICAgICAgIHkgKz0gZFlWZXI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbm93IGNoZWNrIGFnYWluc3QgaG9yaXpvbnRhbCBsaW5lcy4gSXQncyBiYXNpY2FsbHkgdGhlIHNhbWUsIGp1c3QgXCJ0dXJuZWQgYXJvdW5kXCIuXG4gICAgICAgIC8vIHRoZSBvbmx5IGRpZmZlcmVuY2UgaGVyZSBpcyB0aGF0IG9uY2Ugd2UgaGl0IGEgbWFwIGJsb2NrLFxuICAgICAgICAvLyB3ZSBjaGVjayBpZiB0aGVyZSB3ZSBhbHNvIGZvdW5kIG9uZSBpbiB0aGUgZWFybGllciwgdmVydGljYWwgcnVuLiBXZSdsbCBrbm93IHRoYXQgaWYgZGlzdCAhPSAwLlxuICAgICAgICAvLyBJZiBzbywgd2Ugb25seSByZWdpc3RlciB0aGlzIGhpdCBpZiB0aGlzIGRpc3RhbmNlIGlzIHNtYWxsZXIuXG4gICAgICAgIHZhciBzbG9wZSA9IGFuZ2xlQ29zIC8gYW5nbGVTaW47XG4gICAgICAgIHZhciBkWUhvciA9IHVwID8gLTEgOiAxO1xuICAgICAgICB2YXIgZFhIb3IgPSBkWUhvciAqIHNsb3BlO1xuICAgICAgICB2YXIgeSA9IHVwID8gTWF0aC5mbG9vcih0aGlzLnBsYXllci5wb3MueSkgOiBNYXRoLmNlaWwodGhpcy5wbGF5ZXIucG9zLnkpO1xuICAgICAgICB2YXIgeCA9IHRoaXMucGxheWVyLnBvcy54ICsgKHkgLSB0aGlzLnBsYXllci5wb3MueSkgKiBzbG9wZTtcbiAgICAgICAgd2hpbGUgKHggPj0gMCAmJiB4IDwgdGhpcy5tYXBXaWR0aCAmJiB5ID49IDAgJiYgeSA8IHRoaXMubWFwSGVpZ2h0KSB7XG4gICAgICAgICAgICB2YXIgd2FsbFkgPSBNYXRoLmZsb29yKHkgKyAodXAgPyAtMSA6IDApKTtcbiAgICAgICAgICAgIHZhciB3YWxsWCA9IHggPj4gMDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKHNwcml0ZU1hcFt3YWxsWV1bd2FsbFhdICYmICFzcHJpdGVNYXBbd2FsbFldW3dhbGxYXS52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwcml0ZU1hcFt3YWxsWV1bd2FsbFhdLnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlU3ByaXRlcy5wdXNoKHNwcml0ZU1hcFt3YWxsWV1bd2FsbFhdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgICAgICAgICBpZiAodGhpcy5sZXZlbC5tYXBbd2FsbFldW3dhbGxYXSA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgZGlzdFggPSB4IC0gdGhpcy5wbGF5ZXIucG9zLng7XG4gICAgICAgICAgICAgICAgdmFyIGRpc3RZID0geSAtIHRoaXMucGxheWVyLnBvcy55O1xuICAgICAgICAgICAgICAgIHZhciBibG9ja0Rpc3QgPSBkaXN0WCAqIGRpc3RYICsgZGlzdFkgKiBkaXN0WTtcbiAgICAgICAgICAgICAgICBpZiAoIWRpc3QgfHwgYmxvY2tEaXN0IDwgZGlzdCkge1xuICAgICAgICAgICAgICAgICAgICBkaXN0ID0gYmxvY2tEaXN0O1xuICAgICAgICAgICAgICAgICAgICB4SGl0ID0geDtcbiAgICAgICAgICAgICAgICAgICAgeUhpdCA9IHk7XG4gICAgICAgICAgICAgICAgICAgIHlXYWxsSGl0ID0gd2FsbFk7XG4gICAgICAgICAgICAgICAgICAgIHhXYWxsSGl0ID0gd2FsbFg7XG4gICAgICAgICAgICAgICAgICAgIHdhbGxUeXBlID0gdGhpcy5sZXZlbC5tYXBbd2FsbFldW3dhbGxYXTtcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZVggPSB4ICUgMTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlWCA9IDEgLSB0ZXh0dXJlWDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHggKz0gZFhIb3I7XG4gICAgICAgICAgICB5ICs9IGRZSG9yO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXN0KSB7XG4gICAgICAgICAgICB2YXIgc3RyaXAgPSB0aGlzLnJlbmRlcmVyLnNjcmVlblN0cmlwc1tzdHJpcElkeF07XG4gICAgICAgICAgICBkaXN0ID0gTWF0aC5zcXJ0KGRpc3QpO1xuICAgICAgICAgICAgLy8gdXNlIHBlcnBlbmRpY3VsYXIgZGlzdGFuY2UgdG8gYWRqdXN0IGZvciBmaXNoIGV5ZVxuICAgICAgICAgICAgLy8gZGlzdG9ydGVkX2Rpc3QgPSBjb3JyZWN0X2Rpc3QgLyBjb3MocmVsYXRpdmVfYW5nbGVfb2ZfcmF5KVxuICAgICAgICAgICAgZGlzdCA9IGRpc3QgKiBNYXRoLmNvcyh0aGlzLnBsYXllci5yb3RhdGlvbiAtIHJheUFuZ2xlKTtcbiAgICAgICAgICAgIC8vIG5vdyBjYWxjIHRoZSBwb3NpdGlvbiwgaGVpZ2h0IGFuZCB3aWR0aCBvZiB0aGUgd2FsbCBzdHJpcFxuICAgICAgICAgICAgLy8gXCJyZWFsXCIgd2FsbCBoZWlnaHQgaW4gdGhlIGdhbWUgd29ybGQgaXMgMSB1bml0LCB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgcGxheWVyIHRvIHRoZSBzY3JlZW4gaXMgdmlld0Rpc3QsXG4gICAgICAgICAgICAvLyB0aHVzIHRoZSBoZWlnaHQgb24gdGhlIHNjcmVlbiBpcyBlcXVhbCB0byB3YWxsX2hlaWdodF9yZWFsICogdmlld0Rpc3QgLyBkaXN0XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgdmFyIGhlaWdodCA9IE1hdGgucm91bmQodmlld0Rpc3QgLyBkaXN0KTtcbiAgICAgICAgICAgIC8vIHdpZHRoIGlzIHRoZSBzYW1lLCBidXQgd2UgaGF2ZSB0byBzdHJldGNoIHRoZSB0ZXh0dXJlIHRvIGEgZmFjdG9yIG9mIHN0cmlwV2lkdGggdG8gbWFrZSBpdCBmaWxsIHRoZSBzdHJpcCBjb3JyZWN0bHlcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IGhlaWdodCAqIHN0cmlwV2lkdGg7XG4gICAgICAgICAgICAvLyB0b3AgcGxhY2VtZW50IGlzIGVhc3kgc2luY2UgZXZlcnl0aGluZyBpcyBjZW50ZXJlZCBvbiB0aGUgeC1heGlzLCBzbyB3ZSBzaW1wbHkgbW92ZVxuICAgICAgICAgICAgLy8gaXQgaGFsZiB3YXkgZG93biB0aGUgc2NyZWVuIGFuZCB0aGVuIGhhbGYgdGhlIHdhbGwgaGVpZ2h0IGJhY2sgdXAuXG4gICAgICAgICAgICB2YXIgdG9wID0gTWF0aC5yb3VuZCgoc2NyZWVuSGVpZ2h0IC0gaGVpZ2h0KSAvIDIpO1xuICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICBsZXQgc3R5bGVIZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgICAgICBzdHJpcC5zdHlsZS5oZWlnaHQgPSBzdHlsZUhlaWdodCArIFwicHhcIjtcbiAgICAgICAgICAgIHN0cmlwLnN0eWxlLnRvcCA9IHRvcCArIFwicHhcIjtcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgc3RyaXAuaW1nLnN0eWxlLmhlaWdodCA9IE1hdGguZmxvb3IoaGVpZ2h0ICogbnVtVGV4dHVyZXMpICsgXCJweFwiO1xuICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICBzdHJpcC5pbWcuc3R5bGUud2lkdGggPSBNYXRoLmZsb29yKHdpZHRoICogMikgKyBcInB4XCI7XG4gICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgIHN0cmlwLmltZy5zdHlsZS50b3AgPSAtTWF0aC5mbG9vcihoZWlnaHQgKiAod2FsbFR5cGUgLSAxKSkgKyBcInB4XCI7XG4gICAgICAgICAgICB2YXIgdGV4WCA9IE1hdGgucm91bmQodGV4dHVyZVggKiB3aWR0aCk7XG4gICAgICAgICAgICBpZiAodGV4WCA+IHdpZHRoIC0gc3RyaXBXaWR0aClcbiAgICAgICAgICAgICAgICB0ZXhYID0gd2lkdGggLSBzdHJpcFdpZHRoO1xuICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICBzdHJpcC5pbWcuc3R5bGUubGVmdCA9IC10ZXhYICsgXCJweFwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldHVwKCkge1xuICAgICAgICB0aGlzLm1hcFdpZHRoID0gdGhpcy5sZXZlbC5tYXBbMF0ubGVuZ3RoO1xuICAgICAgICB0aGlzLm1hcEhlaWdodCA9IHRoaXMubGV2ZWwubWFwLmxlbmd0aDtcbiAgICAgICAgdGhpcy5pbml0U3ByaXRlcygpO1xuICAgICAgICB0aGlzLmRyYXdNaW5pTWFwKCk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuaW1hZ2VSZW5kZXJpbmcgPSBcInBpeGVsYXRlZFwiO1xuICAgICAgICB0aGlzLmxvb3AoMCk7XG4gICAgfVxuICAgIG1vdmVQbGF5ZXIoZW50aXR5LCBkdCkge1xuICAgICAgICBjb25zdCBtb3ZlU3RlcCA9IGVudGl0eS5tb3ZlU3BlZWQgKiBlbnRpdHkuc3BlZWQ7XG4gICAgICAgIC8vIHBsYXllciBtdXN0IHJvdGF0ZSBhbmQgbW92ZSBvbiBlYWNoIHNpZGVcbiAgICAgICAgbGV0IG5ld1ggPSBlbnRpdHkucG9zLnggKyBNYXRoLmNvcyhlbnRpdHkucm90YXRpb24pICogbW92ZVN0ZXAgKiAtZHQ7XG4gICAgICAgIGxldCBuZXdZID0gZW50aXR5LnBvcy55ICsgTWF0aC5zaW4oZW50aXR5LnJvdGF0aW9uKSAqIG1vdmVTdGVwICogLWR0O1xuICAgICAgICBpZiAoZW50aXR5LmRpcmVjdGlvbi54ICE9PSAwKSB7XG4gICAgICAgICAgICBuZXdYID0gZW50aXR5LnBvcy54ICsgTWF0aC5jb3MoZW50aXR5LnJvdGF0aW9uICsgTWF0aC5QSSAvIDIpICogbW92ZVN0ZXAgKiAtZHQ7XG4gICAgICAgICAgICBuZXdZID0gZW50aXR5LnBvcy55ICsgTWF0aC5zaW4oZW50aXR5LnJvdGF0aW9uICsgTWF0aC5QSSAvIDIpICogbW92ZVN0ZXAgKiAtZHQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcG9zID0gdGhpcy5jaGVja0NvbGxpc2lvbihlbnRpdHkucG9zLngsIGVudGl0eS5wb3MueSwgbmV3WCwgbmV3WSwgMC4zNSk7XG4gICAgICAgIGVudGl0eS5wb3MueCA9IHBvcy54O1xuICAgICAgICBlbnRpdHkucG9zLnkgPSBwb3MueTtcbiAgICAgICAgaWYgKGVudGl0eS5yb3RhdGlvbiA8IDApXG4gICAgICAgICAgICBlbnRpdHkucm90YXRpb24gKz0gTWF0aC5QSSAqIDI7XG4gICAgICAgIGlmIChlbnRpdHkucm90YXRpb24gPj0gTWF0aC5QSSAqIDIpIHtcbiAgICAgICAgICAgIGVudGl0eS5yb3RhdGlvbiAtPSBNYXRoLlBJICogMjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLmRheVRpbWUgPCAxMikge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5za3lib3guc3R5bGUuYmFja2dyb3VuZENvbG9yID0gYHJnYmEoJHs5OSAvICgxMiAvIHRoaXMuZGF5VGltZSl9LCBcbiAgICAkezE1NSAvICgxMiAvIHRoaXMuZGF5VGltZSl9LFxuICAgICR7MjU1IC8gKDEyIC8gdGhpcy5kYXlUaW1lKX1cbiAgICAsIDEpYDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2t5Ym94LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGByZ2JhKCR7OTkgLyAoMTIgLyAoMjQgLSB0aGlzLmRheVRpbWUpKX0sIFxuICAgICAgJHsxNTUgLyAoMTIgLyAoMjQgLSB0aGlzLmRheVRpbWUpKX0sXG4gICAgICAkezI1NSAvICgxMiAvICgyNCAtIHRoaXMuZGF5VGltZSkpfVxuICAgICAgLCAxKWA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlKGR0KSB7XG4gICAgICAgIHRoaXMuY29udHJvbGxlci51cGRhdGUoZHQpO1xuICAgICAgICB0aGlzLm1vdmVQbGF5ZXIodGhpcy5wbGF5ZXIsIGR0KTtcbiAgICAgICAgdGhpcy51cGRhdGVNaW5pTWFwKCk7XG4gICAgICAgIHRoaXMuY2FzdFJheXMoKTtcbiAgICAgICAgdGlja0NvdW50ICs9IC1kdDtcbiAgICAgICAgaWYgKHRpY2tDb3VudCA+IDEwMCkge1xuICAgICAgICAgICAgdGhpcy5kYXlUaW1lICs9IDAuMDE7XG4gICAgICAgICAgICBpZiAodGhpcy5kYXlUaW1lID4gMjMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRheVRpbWUgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGlja0NvdW50ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBkZWJ1Z1NjcmVlbi5pbm5lclRleHQgPSBgXG4gICAgICBQTEFZRVIgWDogJHt0aGlzLnBsYXllci5wb3MueH1cbiAgICAgIFBMQVlFUiBZOiAke3RoaXMucGxheWVyLnBvcy55fVxuICAgICAgUExBWUVSIEFOR0xFOiAke3RoaXMucGxheWVyLnJvdGF0aW9ufVxuICAgICAgRFQ6ICR7ZHR9XG4gICAgYDtcbiAgICB9XG4gICAgbG9vcCh0cykge1xuICAgICAgICBjb25zdCBkdCA9IGxhc3RUaW1lIC0gdHM7XG4gICAgICAgIGxhc3RUaW1lID0gdHM7XG4gICAgICAgIHRoaXMudXBkYXRlKGR0KTtcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMubG9vcC5iaW5kKHRoaXMpKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgR2FtZSBmcm9tIFwiLi9nYW1lXCI7XG5jb25zdCBnYW1lID0gbmV3IEdhbWUoKTtcbi8vQHRzLWlnbm9yZVxud2luZG93LmdhbWUgPSBnYW1lO1xuZ2FtZS5zZXR1cCgpO1xuIl0sIm5hbWVzIjpbImFsZWEiLCJ4b3IxMjgiLCJ4b3J3b3ciLCJ4b3JzaGlmdDciLCJ4b3I0MDk2IiwidHljaGVpIiwic3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiZ2xvYmFsIiwiZGVmaW5lIiwiQWxlYSIsInNlZWQiLCJtZSIsInRoaXMiLCJtYXNoIiwibiIsImRhdGEiLCJTdHJpbmciLCJpIiwibGVuZ3RoIiwiaCIsImNoYXJDb2RlQXQiLCJNYXNoIiwibmV4dCIsInQiLCJzMCIsImMiLCJzMSIsInMyIiwiY29weSIsImYiLCJpbXBsIiwib3B0cyIsInhnIiwic3RhdGUiLCJwcm5nIiwiaW50MzIiLCJkb3VibGUiLCJxdWljayIsIlhvckdlbiIsInN0cnNlZWQiLCJiIiwiZCIsImEiLCJNYXRoIiwiZmxvb3IiLCJrIiwicmVzdWx0IiwieCIsInkiLCJ6IiwidyIsInYiLCJYIiwiaiIsImxpbWl0IiwibWF4IiwiaW5pdCIsInNsaWNlIiwiRGF0ZSIsInB1c2giLCJwb29sIiwibWF0aCIsIm5vZGVjcnlwdG8iLCJ3aWR0aCIsImNodW5rcyIsInJuZ25hbWUiLCJzdGFydGRlbm9tIiwicG93Iiwic2lnbmlmaWNhbmNlIiwib3ZlcmZsb3ciLCJtYXNrIiwic2VlZHJhbmRvbSIsIm9wdGlvbnMiLCJjYWxsYmFjayIsImtleSIsInNob3J0c2VlZCIsIm1peGtleSIsImZsYXR0ZW4iLCJlbnRyb3B5IiwidG9zdHJpbmciLCJvdXQiLCJyYW5kb21CeXRlcyIsIlVpbnQ4QXJyYXkiLCJjcnlwdG8iLCJtc0NyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsImUiLCJicm93c2VyIiwibmF2aWdhdG9yIiwicGx1Z2lucyIsInNjcmVlbiIsImF1dG9zZWVkIiwiYXJjNCIsIkFSQzQiLCJnIiwiUyIsInBhc3MiLCJpc19tYXRoX2NhbGwiLCJrZXlsZW4iLCJzIiwiY291bnQiLCJyIiwib2JqIiwiZGVwdGgiLCJwcm9wIiwidHlwIiwic21lYXIiLCJzdHJpbmdzZWVkIiwiZnJvbUNoYXJDb2RlIiwiYXBwbHkiLCJyYW5kb20iLCJleCIsInNlbGYiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJpZCIsImxvYWRlZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJjYWxsIiwiYW1kRCIsIkVycm9yIiwiYW1kTyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkZWZpbml0aW9uIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5Iiwibm1kIiwicGF0aHMiLCJjaGlsZHJlbiIsIm1hcCIsImhlaWdodCIsIndpbmRvdyIsIlVpbnQzMkFycmF5IiwidG9TdHJpbmciLCJyb29tcyIsImxpbmVzIiwicGFydGl0aW9uIiwicm9vbSIsImxlZnRSb29tIiwicmlnaHRSb29tIiwibGluZSIsImlzVmVydGljYWwiLCJzcGxpdFBvaW50Iiwic3RhcnQiLCJlbmQiLCJwYXJ0aXRpb25Sb29tIiwiQXJyYXkiLCJmaWxsIiwiZm9yRWFjaCIsImN4IiwiY3kiLCJnZW5lcmF0ZU1hcCIsImNvbnNvbGUiLCJsb2ciLCJuYW1lIiwiUGVyc29uIiwiY29uc3RydWN0b3IiLCJwb3MiLCJzcGVlZCIsIm1vdmVTcGVlZCIsInJvdGF0aW9uIiwiZGlyZWN0aW9uIiwicm90YXRpb25TcGVlZCIsIlBsYXllciIsInN1cGVyIiwiaXNTdHJhZmluZyIsIlBJIiwiSFVEIiwiX2NhbnZhcyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0IiwiX2N0eCIsImdldENvbnRleHQiLCJyZW5kZXJDcm9zc2hhaXIiLCJjYW52YXMiLCJjdHgiLCJiZWdpblBhdGgiLCJtb3ZlVG8iLCJsaW5lVG8iLCJzdHJva2VTdHlsZSIsInN0cm9rZSIsIlJlbmRlcmVyIiwic3RyaXBXaWR0aCIsInNjcmVlblN0cmlwcyIsInNreWJveCIsImJvZHkiLCJwcmVwZW5kIiwib25SZXNpemUiLCJhc3BlY3RSYXRpbyIsIm5ld1dpZHRoIiwiaW5uZXJXaWR0aCIsIm5ld0hlaWdodCIsImN1cnNvciIsImh1ZCIsImxldmVsIiwiaGFuZCIsImFwcGVuZENoaWxkIiwic3RyaXAiLCJiYWNrZ3JvdW5kQ29sb3IiLCJpbWciLCJJbWFnZSIsInNyYyIsImRyYXdSYXkiLCJjYXN0U2luZ2xlUmF5IiwiZHJhd01pbmlNYXAiLCJ1cGRhdGVNaW5pTWFwIiwiZ2FtZSIsImtleXNQcmVzc2VkIiwiZW5hYmxlUG9pbnRlckxvY2siLCJpc0tleVByZXNzZWQiLCJvbktleWRvd24iLCJjb2RlIiwib25LZXl1cCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZXF1ZXN0UG9pbnRlckxvY2siLCJvbk1vdXNlTW92ZSIsImJpbmQiLCJyb3RhdGlvbkNoYW5nZSIsIm1vdmVtZW50WCIsInBsYXllciIsInVwZGF0ZSIsImR0IiwiR2FtZVN0YXRlIiwibWluaU1hcCIsInF1ZXJ5U2VsZWN0b3IiLCJtaW5pTWFwT2JqZWN0cyIsImxhc3RUaW1lIiwiZm92SGFsZiIsIm51bVJheXMiLCJjZWlsIiwic2NyZWVuV2lkdGgiLCJ2aWV3RGlzdCIsInRhbiIsInR3b1BJIiwidmlzaWJsZVNwcml0ZXMiLCJ0aWNrQ291bnQiLCJzcHJpdGVNYXAiLCJtYXBJdGVtcyIsIml0ZW1UeXBlcyIsImRlYnVnU2NyZWVuIiwibWFwV2lkdGgiLCJtYXBIZWlnaHQiLCJkYXlUaW1lIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJjbGVhclJlY3QiLCJjb3MiLCJzaW4iLCJjbG9zZVBhdGgiLCJyZW5kZXJlciIsImNvbnRyb2xsZXIiLCJzZXR1cCIsImluaXRTcHJpdGVzIiwic3ByaXRlIiwiaXRlbVR5cGUiLCJ0eXBlIiwiZGlzcGxheSIsInZpc2libGUiLCJibG9jayIsImlzQmxvY2tpbmciLCJpeCIsIml5IiwiY2hlY2tDb2xsaXNpb24iLCJmcm9tWCIsImZyb21ZIiwidG9YIiwidG9ZIiwicmFkaXVzIiwiYmxvY2tYIiwiYmxvY2tZIiwiZHgiLCJkeSIsImJsb2NrVG9wIiwiYmxvY2tCb3R0b20iLCJibG9ja0xlZnQiLCJibG9ja1JpZ2h0IiwiY2FzdFJheXMiLCJzdHJpcElkeCIsInJheVNjcmVlblBvcyIsInJheVZpZXdEaXN0Iiwic3FydCIsInJheUFuZ2xlIiwiYXNpbiIsInJpZ2h0IiwidXAiLCJ3YWxsVHlwZSIsImFuZ2xlU2luIiwiYW5nbGVDb3MiLCJkaXN0IiwieFdhbGxIaXQiLCJ5V2FsbEhpdCIsInRleHR1cmVYIiwiZFhWZXIiLCJkWVZlciIsInNsb3BlIiwid2FsbFgiLCJ3YWxsWSIsImRpc3RYIiwiZGlzdFkiLCJkWUhvciIsImRYSG9yIiwiYmxvY2tEaXN0Iiwicm91bmQiLCJzdHlsZUhlaWdodCIsInRleFgiLCJpbWFnZVJlbmRlcmluZyIsImxvb3AiLCJtb3ZlUGxheWVyIiwiZW50aXR5IiwibW92ZVN0ZXAiLCJuZXdYIiwibmV3WSIsInJlbmRlciIsImlubmVyVGV4dCIsInRzIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==