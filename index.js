(()=>{var t={377:(t,e,i)=>{var s=i(832),n=i(652),r=i(801),o=i(30),a=i(618),h=i(49),c=i(971);c.alea=s,c.xor128=n,c.xorwow=r,c.xorshift7=o,c.xor4096=a,c.tychei=h,t.exports=c},832:function(t,e,i){var s;!function(t,n,r){function o(t){var e=this,i=function(){var t=4022871197,e=function(e){e=String(e);for(var i=0;i<e.length;i++){var s=.02519603282416938*(t+=e.charCodeAt(i));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)};return e}();e.next=function(){var t=2091639*e.s0+2.3283064365386963e-10*e.c;return e.s0=e.s1,e.s1=e.s2,e.s2=t-(e.c=0|t)},e.c=1,e.s0=i(" "),e.s1=i(" "),e.s2=i(" "),e.s0-=i(t),e.s0<0&&(e.s0+=1),e.s1-=i(t),e.s1<0&&(e.s1+=1),e.s2-=i(t),e.s2<0&&(e.s2+=1),i=null}function a(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function h(t,e){var i=new o(t),s=e&&e.state,n=i.next;return n.int32=function(){return 4294967296*i.next()|0},n.double=function(){return n()+11102230246251565e-32*(2097152*n()|0)},n.quick=n,s&&("object"==typeof s&&a(s,i),n.state=function(){return a(i,{})}),n}n&&n.exports?n.exports=h:i.amdD&&i.amdO?void 0===(s=function(){return h}.call(e,i,e,n))||(n.exports=s):this.alea=h}(0,t=i.nmd(t),i.amdD)},49:function(t,e,i){var s;!function(t,n,r){function o(t){var e=this,i="";e.next=function(){var t=e.b,i=e.c,s=e.d,n=e.a;return t=t<<25^t>>>7^i,i=i-s|0,s=s<<24^s>>>8^n,n=n-t|0,e.b=t=t<<20^t>>>12^i,e.c=i=i-s|0,e.d=s<<16^i>>>16^n,e.a=n-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):i+=t;for(var s=0;s<i.length+20;s++)e.b^=0|i.charCodeAt(s),e.next()}function a(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function h(t,e){var i=new o(t),s=e&&e.state,n=function(){return(i.next()>>>0)/4294967296};return n.double=function(){do{var t=((i.next()>>>11)+(i.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},n.int32=i.next,n.quick=n,s&&("object"==typeof s&&a(s,i),n.state=function(){return a(i,{})}),n}n&&n.exports?n.exports=h:i.amdD&&i.amdO?void 0===(s=function(){return h}.call(e,i,e,n))||(n.exports=s):this.tychei=h}(0,t=i.nmd(t),i.amdD)},652:function(t,e,i){var s;!function(t,n,r){function o(t){var e=this,i="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:i+=t;for(var s=0;s<i.length+64;s++)e.x^=0|i.charCodeAt(s),e.next()}function a(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function h(t,e){var i=new o(t),s=e&&e.state,n=function(){return(i.next()>>>0)/4294967296};return n.double=function(){do{var t=((i.next()>>>11)+(i.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},n.int32=i.next,n.quick=n,s&&("object"==typeof s&&a(s,i),n.state=function(){return a(i,{})}),n}n&&n.exports?n.exports=h:i.amdD&&i.amdO?void 0===(s=function(){return h}.call(e,i,e,n))||(n.exports=s):this.xor128=h}(0,t=i.nmd(t),i.amdD)},618:function(t,e,i){var s;!function(t,n,r){function o(t){var e=this;e.next=function(){var t,i,s=e.w,n=e.X,r=e.i;return e.w=s=s+1640531527|0,i=n[r+34&127],t=n[r=r+1&127],i^=i<<13,t^=t<<17,i^=i>>>15,t^=t>>>12,i=n[r]=i^t,e.i=r,i+(s^s>>>16)|0},function(t,e){var i,s,n,r,o,a=[],h=128;for(e===(0|e)?(s=e,e=null):(e+="\0",s=0,h=Math.max(h,e.length)),n=0,r=-32;r<h;++r)e&&(s^=e.charCodeAt((r+32)%e.length)),0===r&&(o=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,r>=0&&(o=o+1640531527|0,n=0==(i=a[127&r]^=s+o)?n+1:0);for(n>=128&&(a[127&(e&&e.length||0)]=-1),n=127,r=512;r>0;--r)s=a[n+34&127],i=a[n=n+1&127],s^=s<<13,i^=i<<17,s^=s>>>15,i^=i>>>12,a[n]=s^i;t.w=o,t.X=a,t.i=n}(e,t)}function a(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function h(t,e){null==t&&(t=+new Date);var i=new o(t),s=e&&e.state,n=function(){return(i.next()>>>0)/4294967296};return n.double=function(){do{var t=((i.next()>>>11)+(i.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},n.int32=i.next,n.quick=n,s&&(s.X&&a(s,i),n.state=function(){return a(i,{})}),n}n&&n.exports?n.exports=h:i.amdD&&i.amdO?void 0===(s=function(){return h}.call(e,i,e,n))||(n.exports=s):this.xor4096=h}(0,t=i.nmd(t),i.amdD)},30:function(t,e,i){var s;!function(t,n,r){function o(t){var e=this;e.next=function(){var t,i,s=e.x,n=e.i;return t=s[n],i=(t^=t>>>7)^t<<24,i^=(t=s[n+1&7])^t>>>10,i^=(t=s[n+3&7])^t>>>3,i^=(t=s[n+4&7])^t<<7,t=s[n+7&7],i^=(t^=t<<13)^t<<9,s[n]=i,e.i=n+1&7,i},function(t,e){var i,s=[];if(e===(0|e))s[0]=e;else for(e=""+e,i=0;i<e.length;++i)s[7&i]=s[7&i]<<15^e.charCodeAt(i)+s[i+1&7]<<13;for(;s.length<8;)s.push(0);for(i=0;i<8&&0===s[i];++i);for(8==i?s[7]=-1:s[i],t.x=s,t.i=0,i=256;i>0;--i)t.next()}(e,t)}function a(t,e){return e.x=t.x.slice(),e.i=t.i,e}function h(t,e){null==t&&(t=+new Date);var i=new o(t),s=e&&e.state,n=function(){return(i.next()>>>0)/4294967296};return n.double=function(){do{var t=((i.next()>>>11)+(i.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},n.int32=i.next,n.quick=n,s&&(s.x&&a(s,i),n.state=function(){return a(i,{})}),n}n&&n.exports?n.exports=h:i.amdD&&i.amdO?void 0===(s=function(){return h}.call(e,i,e,n))||(n.exports=s):this.xorshift7=h}(0,t=i.nmd(t),i.amdD)},801:function(t,e,i){var s;!function(t,n,r){function o(t){var e=this,i="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:i+=t;for(var s=0;s<i.length+64;s++)e.x^=0|i.charCodeAt(s),s==i.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function a(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function h(t,e){var i=new o(t),s=e&&e.state,n=function(){return(i.next()>>>0)/4294967296};return n.double=function(){do{var t=((i.next()>>>11)+(i.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},n.int32=i.next,n.quick=n,s&&("object"==typeof s&&a(s,i),n.state=function(){return a(i,{})}),n}n&&n.exports?n.exports=h:i.amdD&&i.amdO?void 0===(s=function(){return h}.call(e,i,e,n))||(n.exports=s):this.xorwow=h}(0,t=i.nmd(t),i.amdD)},971:function(t,e,i){var s;!function(n,r,o){var a,h=256,c=6,l="random",d=o.pow(h,c),u=o.pow(2,52),p=2*u,y=h-1;function x(t,e,i){var s=[],y=g(m((e=1==e?{entropy:!0}:e||{}).entropy?[t,w(r)]:null==t?function(){try{var t;return a&&(t=a.randomBytes)?t=t(h):(t=new Uint8Array(h),(n.crypto||n.msCrypto).getRandomValues(t)),w(t)}catch(t){var e=n.navigator,i=e&&e.plugins;return[+new Date,n,i,n.screen,w(r)]}}():t,3),s),x=new f(s),M=function(){for(var t=x.g(c),e=d,i=0;t<u;)t=(t+i)*h,e*=h,i=x.g(1);for(;t>=p;)t/=2,e/=2,i>>>=1;return(t+i)/e};return M.int32=function(){return 0|x.g(4)},M.quick=function(){return x.g(4)/4294967296},M.double=M,g(w(x.S),r),(e.pass||i||function(t,e,i,s){return s&&(s.S&&v(s,x),t.state=function(){return v(x,{})}),i?(o[l]=t,e):t})(M,y,"global"in e?e.global:this==o,e.state)}function f(t){var e,i=t.length,s=this,n=0,r=s.i=s.j=0,o=s.S=[];for(i||(t=[i++]);n<h;)o[n]=n++;for(n=0;n<h;n++)o[n]=o[r=y&r+t[n%i]+(e=o[n])],o[r]=e;(s.g=function(t){for(var e,i=0,n=s.i,r=s.j,o=s.S;t--;)e=o[n=y&n+1],i=i*h+o[y&(o[n]=o[r=y&r+e])+(o[r]=e)];return s.i=n,s.j=r,i})(h)}function v(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function m(t,e){var i,s=[],n=typeof t;if(e&&"object"==n)for(i in t)try{s.push(m(t[i],e-1))}catch(t){}return s.length?s:"string"==n?t:t+"\0"}function g(t,e){for(var i,s=t+"",n=0;n<s.length;)e[y&n]=y&(i^=19*e[y&n])+s.charCodeAt(n++);return w(e)}function w(t){return String.fromCharCode.apply(0,t)}if(g(o.random(),r),t.exports){t.exports=x;try{a=i(42)}catch(t){}}else void 0===(s=function(){return x}.call(e,i,e,t))||(t.exports=s)}("undefined"!=typeof self?self:this,[],Math)},42:()=>{}},e={};function i(s){var n=e[s];if(void 0!==n)return n.exports;var r=e[s]={id:s,loaded:!1,exports:{}};return t[s].call(r.exports,r,r.exports,i),r.loaded=!0,r.exports}i.amdD=function(){throw new Error("define cannot be used indirect")},i.amdO={},i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var s in e)i.o(e,s)&&!i.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{"use strict";var t=i(377),e=i.n(t);const s=function(t,i,s){const n=e()(s||window.crypto.getRandomValues(new Uint32Array(1))[0].toString()),r=[],o=[],a=t=>{if(t.width<20||t.height<20)r.push(t);else{const{leftRoom:e,rightRoom:i,line:s}=function(t,e){const i=e()<.5,s={x:Math.floor(t.x+t.width*e()),y:Math.floor(t.y+t.height*e())},n={x:t.x,y:t.y,width:i?s.x-t.x:t.width,height:i?t.height:s.y-t.y},r={x:i?s.x:t.x,y:i?t.y:s.y,width:i?t.x+t.width-s.x:t.width,height:i?t.height:t.y+t.height-s.y},o={start:{x:s.x,y:s.y},end:{x:i?s.x:s.x+1,y:i?s.y+1:s.y}};return{leftRoom:n,rightRoom:r,line:o}}(t,n);a(e),a(i),r.push(e,i),o.push(s)}};a({x:0,y:0,width:t,height:i});const h=Array(i).fill().map((()=>Array(t).fill(1)));return r.forEach((t=>{for(let e=t.y+1;e<t.y+t.height-1;e++)for(let i=t.x+1;i<t.x+t.width-1;i++)h[e][i]=0;const e=Math.floor(t.x+t.width/2),i=Math.floor(t.y+t.height/2);h[i][e]=2})),o.forEach((t=>{const{start:e,end:i}=t;if(e.x===i.x)for(let t=e.y;t<i.y;t++)h[t][e.x]=1;else for(let t=e.x;t<i.x;t++)h[e.y][t]=1})),h}(50,50,"seed");console.log(s);const n=[{id:0,name:"First level",map:s}];class r{constructor(t){this.id=t,this.pos={x:0,y:0},this.speed=0,this.moveSpeed=0,this.rotation=0,this.direction={x:0,y:0},this.rotationSpeed=0}}class o extends r{constructor(t){super(t),this.isStrafing=!1,this.id=t,this.pos={x:16,y:10},this.speed=0,this.moveSpeed=.005,this.rotation=0,this.direction={x:0,y:0},this.rotationSpeed=1*Math.PI/360}}class a{constructor(t,e){this._canvas=document.createElement("canvas"),this._canvas.width=t,this._canvas.height=e,this._canvas.style.position="absolute",this._canvas.style.top="0",this._canvas.style.left="0",this._canvas.id="hud",this._ctx=this._canvas.getContext("2d"),this.renderCrosshair()}get canvas(){return this._canvas}get ctx(){return this._ctx}renderCrosshair(){this._ctx.beginPath(),this._ctx.moveTo(this.canvas.width/2,this._canvas.height/2),this._ctx.lineTo(this._canvas.width/2+10,this._canvas.height/2),this._ctx.moveTo(this._canvas.width/2,this._canvas.height/2),this._ctx.lineTo(this._canvas.width/2-10,this._canvas.height/2),this._ctx.moveTo(this._canvas.width/2,this._canvas.height/2),this._ctx.lineTo(this._canvas.width/2,this._canvas.height/2+10),this._ctx.moveTo(this._canvas.width/2,this._canvas.height/2),this._ctx.lineTo(this._canvas.width/2,this._canvas.height/2-10),this._ctx.strokeStyle="red",this._ctx.stroke()}}class h{constructor(){this.stripWidth=2,this.screenStrips=[],this.screen=document.createElement("div"),this.width=320,this.height=200,this.screen.id="screen",this.skybox=document.createElement("div"),document.body.prepend(this.screen),this.init()}init(){document.body.style.cursor="none";const t=new a(this.width,this.height),e=document.createElement("div");e.id="floor",this.skybox.id="ceiling";const i=document.createElement("div");i.id="level";const s=document.createElement("div");s.id="hand",this.screen.appendChild(e),this.screen.appendChild(this.skybox),this.screen.appendChild(i),this.screen.appendChild(s),this.screen.appendChild(t.canvas);for(let t=0;t<this.width;t+=this.stripWidth){const e=document.createElement("div");e.style.position="absolute",e.style.left=t+"px",e.style.width=this.stripWidth+"px",e.style.height="0px",e.style.overflow="hidden",e.style.backgroundColor="magenta";const s=new Image;s.src="public/walls.png",s.style.position="absolute",s.style.left="0px",e.appendChild(s),e.img=s,this.screenStrips.push(e),i.appendChild(e)}}drawRay(){}castSingleRay(){}drawMiniMap(){}updateMiniMap(){}}const c=class{constructor(t){this.keysPressed={},this.game=t,this.init()}isKeyPressed(t){return this.keysPressed[t]}onKeydown(t){switch(t.code){case"KeyW":case"KeyS":case"KeyA":case"KeyD":case"ShiftLeft":this.keysPressed[t.code]=!0}}onKeyup(t){switch(console.log(t),t.code){case"KeyW":this.keysPressed[t.code]=!1;case"KeyS":this.keysPressed[t.code]=!1;break;case"KeyA":this.keysPressed[t.code]=!1;case"KeyD":case"ShiftLeft":this.keysPressed[t.code]=!1}}onMouseMove(t){document.addEventListener("mousemove",(t=>{const e=t.clientX-window.innerWidth/2*this.game.player.rotationSpeed;this.game.player.rotation=e/this.game.renderer.width*2*Math.PI}))}init(){console.log("Controller initialized"),window.addEventListener("keydown",this.onKeydown.bind(this)),window.addEventListener("keyup",this.onKeyup.bind(this)),window.addEventListener("mousemove",this.onMouseMove.bind(this))}update(t){this.isKeyPressed("KeyW")&&(this.game.player.speed=1,this.game.player.direction.y=-1),this.isKeyPressed("KeyS")&&(this.game.player.speed=-1,this.game.player.direction.y=1),this.isKeyPressed("KeyA")&&(this.game.player.direction.x=1,this.game.player.speed=-1),this.isKeyPressed("KeyD")&&(this.game.player.direction.x=-1,this.game.player.speed=1),this.isKeyPressed("ShiftLeft")&&(this.game.player.speed*=2),this.isKeyPressed("Space")&&(this.game.player.speed=0,this.game.player.direction.y=0,this.game.player.direction.x=0),this.isKeyPressed("KeyW")||this.isKeyPressed("KeyS")||(this.game.player.direction.y=0),this.isKeyPressed("KeyA")||this.isKeyPressed("KeyD")||(this.game.player.direction.x=0),this.isKeyPressed("ShiftLeft")||(this.game.player.speed/=2)}};var l;!function(t){t[t.Playing=0]="Playing",t[t.GameOver=1]="GameOver",t[t.Paused=2]="Paused",t[t.Inventory=3]="Inventory",t[t.Trading=4]="Trading",t[t.MainMenu=5]="MainMenu"}(l||(l={}));const d=document.querySelector("#miniMap"),u=document.querySelector("#miniMapObjects");let p=0;const y=60*Math.PI/180/2,x=Math.ceil(160),f=160/Math.tan(y),v=2*Math.PI;let m=[],g=0,w=[],M=[],b=[];const k=document.querySelector("#debugScreen");const P=new class{constructor(){this.state="mainmenu",this.mapWidth=0,this.mapHeight=0,this.dayTime=0,this.drawMiniMap=()=>{d.width=8*this.mapWidth,d.height=8*this.mapHeight,d.style.width=8*this.mapWidth+"px";const t=d.getContext("2d");for(let e=0;e<this.mapHeight;e++)for(let i=0;i<this.mapWidth;i++)this.level.map[e][i]>0&&(t.fillStyle="black",t.fillRect(8*i,8*e,8,8))},this.updateMiniMap=()=>{u.width=8*this.mapWidth,u.height=8*this.mapHeight;const t=u.getContext("2d");t.clearRect(0,0,d.width,d.height),t.fillStyle="yellowgreen",t.fillRect(8*this.player.pos.x-2,8*this.player.pos.y-2,4,4),t.beginPath(),t.moveTo(8*this.player.pos.x,8*this.player.pos.y),t.lineTo(8*(this.player.pos.x+4*Math.cos(this.player.rotation)),8*(this.player.pos.y+4*Math.sin(this.player.rotation))),t.closePath(),t.stroke()},this.player=new o("player"),this.renderer=new h,this.controller=new c(this),this.state="mainmenu",this.level=n[0],this.setup()}initSprites(){w=[];for(var t=0;t<this.level.map.length;t++)w[t]=[];for(var e=0;e<M.length;e++){var i=M[e],s=b[i.type],n=document.createElement("img");n.src=s.img,n.style.display="none",n.style.position="absolute",i.visible=!1,i.block=s.block,i.img=n,w[i.y][i.x]=i,this.renderer.screen.appendChild(n)}}isBlocking(t,e){if(e<0||e>=this.mapHeight||t<0||t>=this.mapWidth)return!0;var i=Math.floor(t),s=Math.floor(e);return 0!=this.level.map[s][i]||!(!w[s][i]||!w[s][i].block)}checkCollision(t,e,i,s,n){var r={x:t,y:e};if(s<0||s>=this.mapHeight||i<0||i>=this.mapWidth)return r;var o=Math.floor(i),a=Math.floor(s);if(this.isBlocking(o,a))return r;r.x=i,r.y=s;var h,c,l=this.isBlocking(o,a-1),d=this.isBlocking(o,a+1),u=this.isBlocking(o-1,a),p=this.isBlocking(o+1,a);(l&&s-a<n&&(s=r.y=a+n),d&&a+1-s<n&&(s=r.y=a+1-n),u&&i-o<n&&(i=r.x=o+n),p&&o+1-i<n&&(i=r.x=o+1-n),!this.isBlocking(o-1,a-1)||l&&u)||(h=i-o)*h+(c=s-a)*c<n*n&&(h*h>c*c?i=r.x=o+n:s=r.y=a+n);!this.isBlocking(o+1,a-1)||l&&p||(h=i-(o+1))*h+(c=s-a)*c<n*n&&(h*h>c*c?i=r.x=o+1-n:s=r.y=a+n);!this.isBlocking(o-1,a+1)||d&&d||(h=i-o)*h+(c=s-(a+1))*c<n*n&&(h*h>c*c?i=r.x=o+n:s=r.y=a+1-n);!this.isBlocking(o+1,a+1)||d&&p||(h=i-(o+1))*h+(c=s-(a+1))*c<n*n&&(h*h>c*c?i=r.x=o+1-n:s=r.y=a+1-n);return r}castRays(){let t=0;for(let e=0;e<x;e++){const i=2*(-x/2+e),s=Math.sqrt(i*i+f*f),n=Math.asin(i/s);this.castSingleRay(this.player.rotation+n,t++)}}castSingleRay(t,e){(t%=v)<0&&(t+=v);var i=t>.75*v||t<.25*v,s=t<0||t>Math.PI,n=0,r=Math.sin(t),o=Math.cos(t),a=0;let h=0,c=0;var l=0;for(var d=i?1:-1,u=d*(M=r/o),p=i?Math.ceil(this.player.pos.x):Math.floor(this.player.pos.x),y=this.player.pos.y+(p-this.player.pos.x)*M;p>=0&&p<this.mapWidth&&y>=0&&y<this.mapHeight;){var x=p+(i?0:-1),g=y>>0;try{w[g][x]&&!w[g][x].visible&&(w[g][x].visible=!0,m.push(w[g][x]))}catch(t){}if(this.level.map[g][x]>0){let t=p-this.player.pos.x,e=y-this.player.pos.y;a=t*t+e*e,n=this.level.map[g][x],l=y%1,i||(l=1-l),p,y,h=x,c=g,!0;break}p+=d,y+=u}var M,b=s?-1:1,k=b*(M=o/r);for(y=s?Math.floor(this.player.pos.y):Math.ceil(this.player.pos.y),p=this.player.pos.x+(y-this.player.pos.y)*M;p>=0&&p<this.mapWidth&&y>=0&&y<this.mapHeight;){g=Math.floor(y+(s?-1:0)),x=p>>0;try{w[g][x]&&!w[g][x].visible&&(w[g][x].visible=!0,m.push(w[g][x]))}catch(t){}if(this.level.map[g][x]>0){var P=p-this.player.pos.x,S=y-this.player.pos.y,_=P*P+S*S;(!a||_<a)&&(a=_,p,y,c=g,h=x,n=this.level.map[g][x],l=p%1,s&&(l=1-l));break}p+=k,y+=b}if(a){var K=this.renderer.screenStrips[e];a=Math.sqrt(a),a*=Math.cos(this.player.rotation-t);var C=Math.round(f/a),T=2*C,D=Math.round((200-C)/2);let i=C;K.style.height=i+"px",K.style.top=D+"px",K.img.style.height=Math.floor(4*C)+"px",K.img.style.width=Math.floor(2*T)+"px",K.img.style.top=-Math.floor(C*(n-1))+"px";var A=Math.round(l*T);A>T-2&&(A=T-2),K.img.style.left=-A+"px"}}setup(){this.mapWidth=this.level.map[0].length,this.mapHeight=this.level.map.length,this.initSprites(),this.drawMiniMap(),document.body.style.imageRendering="pixelated",this.loop(0)}movePlayer(t,e){const i=t.moveSpeed*t.speed;let s=t.pos.x+Math.cos(t.rotation)*i*-e,n=t.pos.y+Math.sin(t.rotation)*i*-e;0!==t.direction.x&&(s=t.pos.x+Math.cos(t.rotation+Math.PI/2)*i*-e,n=t.pos.y+Math.sin(t.rotation+Math.PI/2)*i*-e);const r=this.checkCollision(t.pos.x,t.pos.y,s,n,.35);t.pos.x=r.x,t.pos.y=r.y,t.rotation<0&&(t.rotation+=2*Math.PI),t.rotation>=2*Math.PI&&(t.rotation-=2*Math.PI)}render(){this.dayTime<12?this.renderer.skybox.style.backgroundColor=`rgba(${99/(12/this.dayTime)}, \n    ${155/(12/this.dayTime)},\n    ${255/(12/this.dayTime)}\n    , 1)`:this.renderer.skybox.style.backgroundColor=`rgba(${99/(12/(24-this.dayTime))}, \n      ${155/(12/(24-this.dayTime))},\n      ${255/(12/(24-this.dayTime))}\n      , 1)`}update(t){this.controller.update(t),this.movePlayer(this.player,t),this.updateMiniMap(),this.castRays(),g+=-t,g>100&&(this.dayTime+=.01,this.dayTime>23&&(this.dayTime=0),g=0),k.innerText=`\n      PLAYER X: ${this.player.pos.x}\n      PLAYER Y: ${this.player.pos.y}\n      PLAYER ANGLE: ${this.player.rotation}\n      DT: ${t}\n    `}loop(t){const e=p-t;p=t,this.update(e),this.render(),requestAnimationFrame(this.loop.bind(this))}};window.game=P,P.setup()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,