(()=>{var t={377:(t,e,i)=>{var n=i(832),s=i(652),r=i(801),o=i(30),a=i(618),h=i(49),c=i(971);c.alea=n,c.xor128=s,c.xorwow=r,c.xorshift7=o,c.xor4096=a,c.tychei=h,t.exports=c},832:function(t,e,i){var n;!function(t,s,r){function o(t){var e=this,i=function(){var t=4022871197,e=function(e){e=String(e);for(var i=0;i<e.length;i++){var n=.02519603282416938*(t+=e.charCodeAt(i));n-=t=n>>>0,t=(n*=t)>>>0,t+=4294967296*(n-=t)}return 2.3283064365386963e-10*(t>>>0)};return e}();e.next=function(){var t=2091639*e.s0+2.3283064365386963e-10*e.c;return e.s0=e.s1,e.s1=e.s2,e.s2=t-(e.c=0|t)},e.c=1,e.s0=i(" "),e.s1=i(" "),e.s2=i(" "),e.s0-=i(t),e.s0<0&&(e.s0+=1),e.s1-=i(t),e.s1<0&&(e.s1+=1),e.s2-=i(t),e.s2<0&&(e.s2+=1),i=null}function a(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function h(t,e){var i=new o(t),n=e&&e.state,s=i.next;return s.int32=function(){return 4294967296*i.next()|0},s.double=function(){return s()+11102230246251565e-32*(2097152*s()|0)},s.quick=s,n&&("object"==typeof n&&a(n,i),s.state=function(){return a(i,{})}),s}s&&s.exports?s.exports=h:i.amdD&&i.amdO?void 0===(n=function(){return h}.call(e,i,e,s))||(s.exports=n):this.alea=h}(0,t=i.nmd(t),i.amdD)},49:function(t,e,i){var n;!function(t,s,r){function o(t){var e=this,i="";e.next=function(){var t=e.b,i=e.c,n=e.d,s=e.a;return t=t<<25^t>>>7^i,i=i-n|0,n=n<<24^n>>>8^s,s=s-t|0,e.b=t=t<<20^t>>>12^i,e.c=i=i-n|0,e.d=n<<16^i>>>16^s,e.a=s-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):i+=t;for(var n=0;n<i.length+20;n++)e.b^=0|i.charCodeAt(n),e.next()}function a(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function h(t,e){var i=new o(t),n=e&&e.state,s=function(){return(i.next()>>>0)/4294967296};return s.double=function(){do{var t=((i.next()>>>11)+(i.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=i.next,s.quick=s,n&&("object"==typeof n&&a(n,i),s.state=function(){return a(i,{})}),s}s&&s.exports?s.exports=h:i.amdD&&i.amdO?void 0===(n=function(){return h}.call(e,i,e,s))||(s.exports=n):this.tychei=h}(0,t=i.nmd(t),i.amdD)},652:function(t,e,i){var n;!function(t,s,r){function o(t){var e=this,i="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:i+=t;for(var n=0;n<i.length+64;n++)e.x^=0|i.charCodeAt(n),e.next()}function a(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function h(t,e){var i=new o(t),n=e&&e.state,s=function(){return(i.next()>>>0)/4294967296};return s.double=function(){do{var t=((i.next()>>>11)+(i.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=i.next,s.quick=s,n&&("object"==typeof n&&a(n,i),s.state=function(){return a(i,{})}),s}s&&s.exports?s.exports=h:i.amdD&&i.amdO?void 0===(n=function(){return h}.call(e,i,e,s))||(s.exports=n):this.xor128=h}(0,t=i.nmd(t),i.amdD)},618:function(t,e,i){var n;!function(t,s,r){function o(t){var e=this;e.next=function(){var t,i,n=e.w,s=e.X,r=e.i;return e.w=n=n+1640531527|0,i=s[r+34&127],t=s[r=r+1&127],i^=i<<13,t^=t<<17,i^=i>>>15,t^=t>>>12,i=s[r]=i^t,e.i=r,i+(n^n>>>16)|0},function(t,e){var i,n,s,r,o,a=[],h=128;for(e===(0|e)?(n=e,e=null):(e+="\0",n=0,h=Math.max(h,e.length)),s=0,r=-32;r<h;++r)e&&(n^=e.charCodeAt((r+32)%e.length)),0===r&&(o=n),n^=n<<10,n^=n>>>15,n^=n<<4,n^=n>>>13,r>=0&&(o=o+1640531527|0,s=0==(i=a[127&r]^=n+o)?s+1:0);for(s>=128&&(a[127&(e&&e.length||0)]=-1),s=127,r=512;r>0;--r)n=a[s+34&127],i=a[s=s+1&127],n^=n<<13,i^=i<<17,n^=n>>>15,i^=i>>>12,a[s]=n^i;t.w=o,t.X=a,t.i=s}(e,t)}function a(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function h(t,e){null==t&&(t=+new Date);var i=new o(t),n=e&&e.state,s=function(){return(i.next()>>>0)/4294967296};return s.double=function(){do{var t=((i.next()>>>11)+(i.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=i.next,s.quick=s,n&&(n.X&&a(n,i),s.state=function(){return a(i,{})}),s}s&&s.exports?s.exports=h:i.amdD&&i.amdO?void 0===(n=function(){return h}.call(e,i,e,s))||(s.exports=n):this.xor4096=h}(0,t=i.nmd(t),i.amdD)},30:function(t,e,i){var n;!function(t,s,r){function o(t){var e=this;e.next=function(){var t,i,n=e.x,s=e.i;return t=n[s],i=(t^=t>>>7)^t<<24,i^=(t=n[s+1&7])^t>>>10,i^=(t=n[s+3&7])^t>>>3,i^=(t=n[s+4&7])^t<<7,t=n[s+7&7],i^=(t^=t<<13)^t<<9,n[s]=i,e.i=s+1&7,i},function(t,e){var i,n=[];if(e===(0|e))n[0]=e;else for(e=""+e,i=0;i<e.length;++i)n[7&i]=n[7&i]<<15^e.charCodeAt(i)+n[i+1&7]<<13;for(;n.length<8;)n.push(0);for(i=0;i<8&&0===n[i];++i);for(8==i?n[7]=-1:n[i],t.x=n,t.i=0,i=256;i>0;--i)t.next()}(e,t)}function a(t,e){return e.x=t.x.slice(),e.i=t.i,e}function h(t,e){null==t&&(t=+new Date);var i=new o(t),n=e&&e.state,s=function(){return(i.next()>>>0)/4294967296};return s.double=function(){do{var t=((i.next()>>>11)+(i.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=i.next,s.quick=s,n&&(n.x&&a(n,i),s.state=function(){return a(i,{})}),s}s&&s.exports?s.exports=h:i.amdD&&i.amdO?void 0===(n=function(){return h}.call(e,i,e,s))||(s.exports=n):this.xorshift7=h}(0,t=i.nmd(t),i.amdD)},801:function(t,e,i){var n;!function(t,s,r){function o(t){var e=this,i="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:i+=t;for(var n=0;n<i.length+64;n++)e.x^=0|i.charCodeAt(n),n==i.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function a(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function h(t,e){var i=new o(t),n=e&&e.state,s=function(){return(i.next()>>>0)/4294967296};return s.double=function(){do{var t=((i.next()>>>11)+(i.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=i.next,s.quick=s,n&&("object"==typeof n&&a(n,i),s.state=function(){return a(i,{})}),s}s&&s.exports?s.exports=h:i.amdD&&i.amdO?void 0===(n=function(){return h}.call(e,i,e,s))||(s.exports=n):this.xorwow=h}(0,t=i.nmd(t),i.amdD)},971:function(t,e,i){var n;!function(s,r,o){var a,h=256,c=6,l="random",d=o.pow(h,c),u=o.pow(2,52),p=2*u,y=h-1;function x(t,e,i){var n=[],y=g(m((e=1==e?{entropy:!0}:e||{}).entropy?[t,w(r)]:null==t?function(){try{var t;return a&&(t=a.randomBytes)?t=t(h):(t=new Uint8Array(h),(s.crypto||s.msCrypto).getRandomValues(t)),w(t)}catch(t){var e=s.navigator,i=e&&e.plugins;return[+new Date,s,i,s.screen,w(r)]}}():t,3),n),x=new f(n),b=function(){for(var t=x.g(c),e=d,i=0;t<u;)t=(t+i)*h,e*=h,i=x.g(1);for(;t>=p;)t/=2,e/=2,i>>>=1;return(t+i)/e};return b.int32=function(){return 0|x.g(4)},b.quick=function(){return x.g(4)/4294967296},b.double=b,g(w(x.S),r),(e.pass||i||function(t,e,i,n){return n&&(n.S&&v(n,x),t.state=function(){return v(x,{})}),i?(o[l]=t,e):t})(b,y,"global"in e?e.global:this==o,e.state)}function f(t){var e,i=t.length,n=this,s=0,r=n.i=n.j=0,o=n.S=[];for(i||(t=[i++]);s<h;)o[s]=s++;for(s=0;s<h;s++)o[s]=o[r=y&r+t[s%i]+(e=o[s])],o[r]=e;(n.g=function(t){for(var e,i=0,s=n.i,r=n.j,o=n.S;t--;)e=o[s=y&s+1],i=i*h+o[y&(o[s]=o[r=y&r+e])+(o[r]=e)];return n.i=s,n.j=r,i})(h)}function v(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function m(t,e){var i,n=[],s=typeof t;if(e&&"object"==s)for(i in t)try{n.push(m(t[i],e-1))}catch(t){}return n.length?n:"string"==s?t:t+"\0"}function g(t,e){for(var i,n=t+"",s=0;s<n.length;)e[y&s]=y&(i^=19*e[y&s])+n.charCodeAt(s++);return w(e)}function w(t){return String.fromCharCode.apply(0,t)}if(g(o.random(),r),t.exports){t.exports=x;try{a=i(42)}catch(t){}}else void 0===(n=function(){return x}.call(e,i,e,t))||(t.exports=n)}("undefined"!=typeof self?self:this,[],Math)},42:()=>{}},e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var r=e[n]={id:n,loaded:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.loaded=!0,r.exports}i.amdD=function(){throw new Error("define cannot be used indirect")},i.amdO={},i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{"use strict";var t=i(377),e=i.n(t);const n=function(t,i,n){const s=e()(n||window.crypto.getRandomValues(new Uint32Array(1))[0].toString()),r=[],o=[],a=t=>{if(t.width<20||t.height<20)r.push(t);else{const{leftRoom:e,rightRoom:i,line:n}=function(t,e){const i=e()<.5,n={x:Math.floor(t.x+t.width*e()),y:Math.floor(t.y+t.height*e())},s={x:t.x,y:t.y,width:i?n.x-t.x:t.width,height:i?t.height:n.y-t.y},r={x:i?n.x:t.x,y:i?t.y:n.y,width:i?t.x+t.width-n.x:t.width,height:i?t.height:t.y+t.height-n.y},o={start:{x:n.x,y:n.y},end:{x:i?n.x:n.x+1,y:i?n.y+1:n.y}};return{leftRoom:s,rightRoom:r,line:o}}(t,s);a(e),a(i),r.push(e,i),o.push(n)}};a({x:0,y:0,width:t,height:i});const h=Array(i).fill().map((()=>Array(t).fill(1)));return r.forEach((t=>{for(let e=t.y+1;e<t.y+t.height-1;e++)for(let i=t.x+1;i<t.x+t.width-1;i++)h[e][i]=0;const e=Math.floor(t.x+t.width/2),i=Math.floor(t.y+t.height/2);h[i][e]=2})),o.forEach((t=>{const{start:e,end:i}=t;if(e.x===i.x)for(let t=e.y;t<i.y;t++)h[t][e.x]=1;else for(let t=e.x;t<i.x;t++)h[e.y][t]=1})),h}(50,50,"seed");console.log(n);const s=[{id:0,name:"First level",map:n}];class r{constructor(t){this.id=t,this.pos={x:0,y:0},this.speed=0,this.moveSpeed=0,this.rotation=0,this.direction={x:0,y:0},this.rotationSpeed=0}}class o extends r{constructor(t){super(t),this.isStrafing=!1,this.id=t,this.pos={x:16,y:10},this.speed=0,this.moveSpeed=.005,this.rotation=0,this.direction={x:0,y:0},this.rotationSpeed=6*Math.PI/360}}class a{constructor(t,e){this._canvas=document.createElement("canvas"),this._canvas.width=t,this._canvas.height=e,this._canvas.style.position="absolute",this._canvas.style.top="0",this._canvas.style.left="0",this._canvas.id="hud",this._ctx=this._canvas.getContext("2d"),this.renderCrosshair()}get canvas(){return this._canvas}get ctx(){return this._ctx}renderCrosshair(){this._ctx.beginPath(),this._ctx.moveTo(this.canvas.width/2,this._canvas.height/2),this._ctx.lineTo(this._canvas.width/2+10,this._canvas.height/2),this._ctx.moveTo(this._canvas.width/2,this._canvas.height/2),this._ctx.lineTo(this._canvas.width/2-10,this._canvas.height/2),this._ctx.moveTo(this._canvas.width/2,this._canvas.height/2),this._ctx.lineTo(this._canvas.width/2,this._canvas.height/2+10),this._ctx.moveTo(this._canvas.width/2,this._canvas.height/2),this._ctx.lineTo(this._canvas.width/2,this._canvas.height/2-10),this._ctx.strokeStyle="red",this._ctx.stroke()}}class h{constructor(){this.stripWidth=2,this.screenStrips=[],this.screen=document.createElement("div"),this.width=320,this.height=200,this.screen.id="screen",this.skybox=document.createElement("div"),document.body.prepend(this.screen),this.init()}init(){document.body.style.cursor="none";const t=new a(this.width,this.height),e=document.createElement("div");e.id="floor",this.skybox.id="ceiling";const i=document.createElement("div");i.id="level";const n=document.createElement("div");n.id="hand",this.screen.appendChild(e),this.screen.appendChild(this.skybox),this.screen.appendChild(i),this.screen.appendChild(n),this.screen.appendChild(t.canvas);for(let t=0;t<this.width;t+=this.stripWidth){const e=document.createElement("div");e.style.position="absolute",e.style.left=t+"px",e.style.width=this.stripWidth+"px",e.style.height="0px",e.style.overflow="hidden",e.style.backgroundColor="magenta";const n=new Image;n.src="public/walls.png",n.style.position="absolute",n.style.left="0px",e.appendChild(n),e.img=n,this.screenStrips.push(e),i.appendChild(e)}}drawRay(){}castSingleRay(){}drawMiniMap(){}updateMiniMap(){}}const c=class{constructor(t){this.keysPressed={},this.game=t,this.init()}isKeyPressed(t){return this.keysPressed[t]}onKeydown(t){switch(t.code){case"KeyW":this.keysPressed[t.code]=!0,this.game.player.speed=1,this.game.player.direction.y=-1;break;case"KeyS":this.keysPressed[t.code]=!0,this.game.player.speed=-1,this.game.player.direction.y=1;break;case"KeyA":this.keysPressed[t.code]=!0,this.game.player.direction.x=1,this.game.player.speed=-1;break;case"KeyD":this.keysPressed[t.code]=!0,this.game.player.direction.x=-1,this.game.player.speed=1;break;case"ShiftLeft":this.keysPressed[t.code]=!0,this.game.player.speed*=2}}onKeyup(t){switch(console.log(t),t.code){case"KeyW":this.keysPressed[t.code]=!1;case"KeyS":this.keysPressed[t.code]=!1,this.game.player.speed=0,this.game.player.direction.y=0;break;case"KeyA":this.keysPressed[t.code]=!1;case"KeyD":this.keysPressed[t.code]=!1,this.game.player.speed=0,this.game.player.direction.x=0;break;case"ShiftLeft":this.keysPressed[t.code]=!1,this.game.player.speed/=2}}onMouseMove(t){document.addEventListener("mousemove",(t=>{const e=t.clientX-window.innerWidth/2*this.game.player.rotationSpeed;this.game.player.rotation=e/this.game.renderer.width*2*Math.PI}))}init(){console.log("Controller initialized"),window.addEventListener("keydown",this.onKeydown.bind(this)),window.addEventListener("keyup",this.onKeyup.bind(this))}};var l;!function(t){t[t.Playing=0]="Playing",t[t.GameOver=1]="GameOver",t[t.Paused=2]="Paused",t[t.Inventory=3]="Inventory",t[t.Trading=4]="Trading",t[t.MainMenu=5]="MainMenu"}(l||(l={}));const d=document.querySelector("#miniMap"),u=document.querySelector("#miniMapObjects");let p=0;const y=60*Math.PI/180/2,x=Math.ceil(160),f=160/Math.tan(y),v=2*Math.PI;let m=[],g=0,w=[],b=[],M=[];const k=document.querySelector("#debugScreen");const _=new class{constructor(){this.state="mainmenu",this.mapWidth=0,this.mapHeight=0,this.dayTime=0,this.drawMiniMap=()=>{d.width=8*this.mapWidth,d.height=8*this.mapHeight,d.style.width=8*this.mapWidth+"px";const t=d.getContext("2d");for(let e=0;e<this.mapHeight;e++)for(let i=0;i<this.mapWidth;i++)this.level.map[e][i]>0&&(t.fillStyle="black",t.fillRect(8*i,8*e,8,8))},this.updateMiniMap=()=>{u.width=8*this.mapWidth,u.height=8*this.mapHeight;const t=u.getContext("2d");t.clearRect(0,0,d.width,d.height),t.fillStyle="yellowgreen",t.fillRect(8*this.player.pos.x-2,8*this.player.pos.y-2,4,4),t.beginPath(),t.moveTo(8*this.player.pos.x,8*this.player.pos.y),t.lineTo(8*(this.player.pos.x+4*Math.cos(this.player.rotation)),8*(this.player.pos.y+4*Math.sin(this.player.rotation))),t.closePath(),t.stroke()},this.player=new o("player"),this.renderer=new h,this.controller=new c(this),this.state="mainmenu",this.level=s[0],this.setup()}initSprites(){w=[];for(var t=0;t<this.level.map.length;t++)w[t]=[];for(var e=0;e<b.length;e++){var i=b[e],n=M[i.type],s=document.createElement("img");s.src=n.img,s.style.display="none",s.style.position="absolute",i.visible=!1,i.block=n.block,i.img=s,w[i.y][i.x]=i,this.renderer.screen.appendChild(s)}}isBlocking(t,e){if(e<0||e>=this.mapHeight||t<0||t>=this.mapWidth)return!0;var i=Math.floor(t),n=Math.floor(e);return 0!=this.level.map[n][i]||!(!w[n][i]||!w[n][i].block)}checkCollision(t,e,i,n,s){var r={x:t,y:e};if(n<0||n>=this.mapHeight||i<0||i>=this.mapWidth)return r;var o=Math.floor(i),a=Math.floor(n);if(this.isBlocking(o,a))return r;r.x=i,r.y=n;var h,c,l=this.isBlocking(o,a-1),d=this.isBlocking(o,a+1),u=this.isBlocking(o-1,a),p=this.isBlocking(o+1,a);(l&&n-a<s&&(n=r.y=a+s),d&&a+1-n<s&&(n=r.y=a+1-s),u&&i-o<s&&(i=r.x=o+s),p&&o+1-i<s&&(i=r.x=o+1-s),!this.isBlocking(o-1,a-1)||l&&u)||(h=i-o)*h+(c=n-a)*c<s*s&&(h*h>c*c?i=r.x=o+s:n=r.y=a+s);!this.isBlocking(o+1,a-1)||l&&p||(h=i-(o+1))*h+(c=n-a)*c<s*s&&(h*h>c*c?i=r.x=o+1-s:n=r.y=a+s);!this.isBlocking(o-1,a+1)||d&&d||(h=i-o)*h+(c=n-(a+1))*c<s*s&&(h*h>c*c?i=r.x=o+s:n=r.y=a+1-s);!this.isBlocking(o+1,a+1)||d&&p||(h=i-(o+1))*h+(c=n-(a+1))*c<s*s&&(h*h>c*c?i=r.x=o+1-s:n=r.y=a+1-s);return r}castRays(){let t=0;for(let e=0;e<x;e++){const i=2*(-x/2+e),n=Math.sqrt(i*i+f*f),s=Math.asin(i/n);this.castSingleRay(this.player.rotation+s,t++)}}castSingleRay(t,e){(t%=v)<0&&(t+=v);var i=t>.75*v||t<.25*v,n=t<0||t>Math.PI,s=0,r=Math.sin(t),o=Math.cos(t),a=0;let h=0,c=0;var l=0;for(var d=i?1:-1,u=d*(b=r/o),p=i?Math.ceil(this.player.pos.x):Math.floor(this.player.pos.x),y=this.player.pos.y+(p-this.player.pos.x)*b;p>=0&&p<this.mapWidth&&y>=0&&y<this.mapHeight;){var x=p+(i?0:-1),g=y>>0;try{w[g][x]&&!w[g][x].visible&&(w[g][x].visible=!0,m.push(w[g][x]))}catch(t){}if(this.level.map[g][x]>0){let t=p-this.player.pos.x,e=y-this.player.pos.y;a=t*t+e*e,s=this.level.map[g][x],l=y%1,i||(l=1-l),p,y,h=x,c=g,!0;break}p+=d,y+=u}var b,M=n?-1:1,k=M*(b=o/r);for(y=n?Math.floor(this.player.pos.y):Math.ceil(this.player.pos.y),p=this.player.pos.x+(y-this.player.pos.y)*b;p>=0&&p<this.mapWidth&&y>=0&&y<this.mapHeight;){g=Math.floor(y+(n?-1:0)),x=p>>0;try{w[g][x]&&!w[g][x].visible&&(w[g][x].visible=!0,m.push(w[g][x]))}catch(t){}if(this.level.map[g][x]>0){var _=p-this.player.pos.x,P=y-this.player.pos.y,S=_*_+P*P;(!a||S<a)&&(a=S,p,y,c=g,h=x,s=this.level.map[g][x],l=p%1,n&&(l=1-l));break}p+=k,y+=M}if(a){var C=this.renderer.screenStrips[e];a=Math.sqrt(a),a*=Math.cos(this.player.rotation-t);var T=Math.round(f/a),D=2*T,R=Math.round((200-T)/2);let i=T;C.style.height=i+"px",C.style.top=R+"px",C.img.style.height=Math.floor(4*T)+"px",C.img.style.width=Math.floor(2*D)+"px",C.img.style.top=-Math.floor(T*(s-1))+"px";var A=Math.round(l*D);A>D-2&&(A=D-2),C.img.style.left=-A+"px"}}setup(){this.mapWidth=this.level.map[0].length,this.mapHeight=this.level.map.length,this.initSprites(),this.drawMiniMap(),document.body.style.imageRendering="pixelated",this.loop(0)}movePlayer(t,e){const i=t.moveSpeed*t.speed;let n=t.pos.x+Math.cos(t.rotation)*i*-e,s=t.pos.y+Math.sin(t.rotation)*i*-e;0!==t.direction.x&&(n=t.pos.x+Math.cos(t.rotation+Math.PI/2)*i*-e,s=t.pos.y+Math.sin(t.rotation+Math.PI/2)*i*-e);const r=this.checkCollision(t.pos.x,t.pos.y,n,s,.35);t.pos.x=r.x,t.pos.y=r.y,t.rotation<0&&(t.rotation+=2*Math.PI),t.rotation>=2*Math.PI&&(t.rotation-=2*Math.PI)}render(){this.dayTime<12?this.renderer.skybox.style.backgroundColor=`rgba(${99/(12/this.dayTime)}, \n    ${155/(12/this.dayTime)},\n    ${255/(12/this.dayTime)}\n    , 1)`:this.renderer.skybox.style.backgroundColor=`rgba(${99/(12/(24-this.dayTime))}, \n      ${155/(12/(24-this.dayTime))},\n      ${255/(12/(24-this.dayTime))}\n      , 1)`}update(t){this.movePlayer(this.player,t),this.updateMiniMap(),this.castRays(),g+=-t,g>100&&(this.dayTime+=.01,this.dayTime>23&&(this.dayTime=0),g=0),k.innerText=`\n      PLAYER X: ${this.player.pos.x}\n      PLAYER Y: ${this.player.pos.y}\n      PLAYER ANGLE: ${this.player.rotation}\n      DT: ${t}\n    `}loop(t){const e=p-t;p=t,this.update(e),this.render(),requestAnimationFrame(this.loop.bind(this))}};window.game=_,_.setup()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,